{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Kaggle Challenge : Dogs-vs-Cats - Binary Image Classification using Keras 코드.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "HE-JTmjLApKN",
        "tbb1Zhe5tyO8",
        "EiKWhwVE2Utm",
        "T-3yx8um7usX",
        "voZTC5W_8dVq",
        "wbCMhPkxhezL"
      ],
      "authorship_tag": "ABX9TyN7ieaK6aXEDeHWtxecYYfi",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/4nchez/Colab-Jupiter/blob/master/Kaggle_Challenge_Dogs_vs_Cats_Binary_Image_Classification_using_Keras_%EC%BD%94%EB%93%9C.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5m83NRwewjUD",
        "colab_type": "text"
      },
      "source": [
        "# Kaggle Challenge : Dogs-vs-Cats - Binary Image Classification using Keras\n",
        "해당 포스트는 [Kaggle  Dogs-vs-Cats challenge](https://www.kaggle.com/c/dogs-vs-cats) 해결하기위해 만들었으며, 여러 가지 자료들을 참고하여 만든 포스트 입니다.\n",
        "\n",
        "\n",
        "*   개발 환경 : google colab, Python3, Tensorflow, Keras\n",
        "*   실험 모델 : VGG16(Transfer Learning)\n",
        "*   실험에 쓰인 데이터 : Kaggle Dogs vs Cats challenge\n",
        "*   Test {개: 1,000, 고양이: 1,000} (총 2,000개)\n",
        "*   Training {개: 5,000, 고양이: 5,000} (총 10,000개)\n",
        "*   Validation {개: 2,500, 고양이: 2,500} (총 5,000개)\n",
        "*   IMAGE_HEIGHT, IMAGE_WIDTH, NUM_CHANNELS, BATCH_SIZE = 150, 150, 3, 32"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QvzEUULo3wfu",
        "colab_type": "text"
      },
      "source": [
        "GPU 사용"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d4yDQ-Wwwk5I",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 372
        },
        "outputId": "78ad4187-8d9d-42fe-ec37-b09d79a37e11"
      },
      "source": [
        "!nvidia-smi"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Thu Sep 24 06:17:29 2020       \n",
            "+-----------------------------------------------------------------------------+\n",
            "| NVIDIA-SMI 450.66       Driver Version: 418.67       CUDA Version: 10.1     |\n",
            "|-------------------------------+----------------------+----------------------+\n",
            "| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n",
            "| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n",
            "|                               |                      |               MIG M. |\n",
            "|===============================+======================+======================|\n",
            "|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\n",
            "| N/A   65C    P8    11W /  70W |      0MiB / 15079MiB |      0%      Default |\n",
            "|                               |                      |                 ERR! |\n",
            "+-------------------------------+----------------------+----------------------+\n",
            "                                                                               \n",
            "+-----------------------------------------------------------------------------+\n",
            "| Processes:                                                                  |\n",
            "|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n",
            "|        ID   ID                                                   Usage      |\n",
            "|=============================================================================|\n",
            "|  No running processes found                                                 |\n",
            "+-----------------------------------------------------------------------------+\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LQtVueKT9Z4x",
        "colab_type": "text"
      },
      "source": [
        "구글 드라이브 연동 코드"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cXnjXPZTn4Dn",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "a945ab32-4b75-494e-e0f4-a60a64bf3c7a"
      },
      "source": [
        "import os\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive/')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive/\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_KTB9Rt6n5Mv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import sys\n",
        "MODEL_SAVE_DIR = \"/content/drive/My Drive/Colab Notebooks/model_states\" #실험에 쓴 모델을 저장할 드라이브 경로\n",
        "IMAGES_ZIP_DIR = \"/content/drive/My Drive/Colab Notebooks/data/cats_vs_dogs\" #구글 드라이브에 저장되어 있는 데이터셋(이미지)\n",
        "import sys\n",
        "sys.path.append('./drive/My Drive/Colab Notebooks')\n",
        "import kr_helper_funcs as kru"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HE-JTmjLApKN",
        "colab_type": "text"
      },
      "source": [
        "## Kaggle  Dogs-vs-Cats challenge Dataset\n",
        "Kaggle train.zip 에는 개와 고양이의 이미지 25,000 개 (고양이 색상 이미지 12,500 개 및 다양한 크기의 개 색상 이미지 12,500 개)가 포함되어 있습니다.\n",
        "\n",
        "train Data 중 별도의 프로그램을 사용하여 고양이와 개에 개에 각각 5,000개의 훈련 이미지, 고양이와 개에 대한 2,500개의 평가 이미지, 고양이와 개에 개에 각각 1,000개의 테스트 이미지로 구성된 작은 데이터 세트를 만들었습니다. 그런 다음 이미지 Dataset.zip 파일을 Google 드라이브에 업로드했습니다.\n",
        "\n",
        "zip 파일 cats_vs_dogs_images_small.zip은 내 Google 드라이브의 IMAGES_ZIP_DIR에서 사용할 수 있습니다. 아래 코드 셀은 로컬로 다운로드하고 /tmp 폴더에 이미지 압축을 풉니다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RZ2LtU_aEZA9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "7bd2b1a1-ad8c-4e9e-9136-44686fb34255"
      },
      "source": [
        "import sys, os, random\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "import keras\n",
        "print('Using Tensorflow version ', tf.__version__)\n",
        "print('Using keras version ', keras.__version__)\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        " \n",
        "plt.style.use('seaborn')\n",
        " \n",
        "seed = 123\n",
        "random.seed(seed)\n",
        "np.random.seed(seed)\n",
        "# tf.set_random_seed(seed)\n",
        " \n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')  # ignore all warnings"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Using Tensorflow version  2.3.0\n",
            "Using keras version  2.4.3\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8ohb1Hf6FyTO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from tensorflow.keras import backend as K\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.layers import (Input, Conv2D, BatchNormalization, MaxPooling2D, \n",
        "                                     Flatten, Dense, Dropout)\n",
        "from tensorflow.keras.regularizers import l2\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ea0g4CxrAmbA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "3e74a4ff-21c4-4132-cb50-644cc9e8763c"
      },
      "source": [
        "import os, shutil\n",
        "import zipfile\n",
        " \n",
        "#!cp $(IMAGES_ZIP_DIR/images_small.zip\" /tmp\n",
        "source_file = os.path.join(IMAGES_ZIP_DIR, 'cats_vs_dogs_images_small.zip')\n",
        "local_zip = '/tmp/cats_vs_dogs_images_small.zip'\n",
        " \n",
        "print(\"Copying from drive %s to %s...\" % (source_file, local_zip), flush=True)\n",
        "shutil.copyfile(source_file, local_zip)\n",
        " \n",
        "assert os.path.exists(local_zip)\n",
        " \n",
        "print('Extracting all images...', flush=True)\n",
        "zip_ref = zipfile.ZipFile(local_zip, 'r')\n",
        " \n",
        "zip_ref.extractall('/tmp')\n",
        "zip_ref.close()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Copying from drive /content/drive/My Drive/Colab Notebooks/data/cats_vs_dogs/cats_vs_dogs_images_small.zip to /tmp/cats_vs_dogs_images_small.zip...\n",
            "Extracting all images...\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tbb1Zhe5tyO8",
        "colab_type": "text"
      },
      "source": [
        "## 실험에 쓰일 데이터 파일 연결"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "leOe8BLVSZl1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "images_root = \"/tmp\" # /content/drive/My Drive/img\n",
        "assert os.path.exists(images_root), \"%s folder does not exist!\" % images_root\n",
        " \n",
        "train_root = os.path.join(images_root,'training')\n",
        "train_root_cat = os.path.join(train_root,'cat')\n",
        "train_root_dog = os.path.join(train_root,'dog')\n",
        " \n",
        "eval_root = os.path.join(images_root,'validation')\n",
        "eval_root_cat = os.path.join(eval_root,'cat')\n",
        "eval_root_dog = os.path.join(eval_root,'dog')\n",
        " \n",
        "test_root = os.path.join(images_root,'test')\n",
        "test_root_cat = os.path.join(test_root,'cat')\n",
        "test_root_dog = os.path.join(test_root,'dog')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XTL2Tfh3jxCT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "IMAGE_HEIGHT, IMAGE_WIDTH, NUM_CHANNELS, BATCH_SIZE = 150, 150, 3, 32"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "wMEZewGL2kw0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 70
        },
        "outputId": "92efd1bb-4618-4f46-8bfa-91760f0180e8"
      },
      "source": [
        "train_datagen = ImageDataGenerator(rescale=1.0/255)\n",
        "eval_datagen = ImageDataGenerator(rescale=1.0/255)\n",
        "test_datagen = ImageDataGenerator(rescale=1.0/255)\n",
        " \n",
        "train_generator = train_datagen.flow_from_directory(\n",
        "    train_root,\n",
        "    target_size=(IMAGE_HEIGHT,IMAGE_WIDTH),  # 이미지 사이즈 변경\n",
        "    batch_size=BATCH_SIZE,\n",
        "    class_mode='binary')\n",
        " \n",
        "eval_generator = eval_datagen.flow_from_directory(\n",
        "    eval_root,\n",
        "    target_size=(IMAGE_HEIGHT,IMAGE_WIDTH),  # 이미지 사이즈 변경\n",
        "    batch_size=BATCH_SIZE,\n",
        "    class_mode='binary')\n",
        " \n",
        "test_generator = test_datagen.flow_from_directory(\n",
        "    test_root,\n",
        "    target_size=(IMAGE_HEIGHT,IMAGE_WIDTH),  # 이미지 사이즈 변경\n",
        "    batch_size=BATCH_SIZE,\n",
        "    class_mode='binary')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 10000 images belonging to 2 classes.\n",
            "Found 5000 images belonging to 2 classes.\n",
            "Found 2000 images belonging to 2 classes.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "nA_rvSOe2kw2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "e384db42-0bf6-4ede-b447-ed1194bb8b94"
      },
      "source": [
        "train_steps = train_generator.n // BATCH_SIZE\n",
        "val_steps = eval_generator.n // BATCH_SIZE\n",
        "test_steps = test_generator.n // BATCH_SIZE\n",
        "train_steps, val_steps, test_steps"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(312, 156, 62)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EiKWhwVE2Utm",
        "colab_type": "text"
      },
      "source": [
        "# 기본 vgg16"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "Q0e9SrkM2kwu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "87836577-caae-4aff-8970-1df2b810da7f"
      },
      "source": [
        "from keras.activations import softmax, relu, sigmoid\n",
        " \n",
        "vgg_base = keras.applications.VGG16(include_top=False, weights='imagenet',input_shape=(IMAGE_HEIGHT, IMAGE_WIDTH, NUM_CHANNELS))\n",
        "alpha = 0.00002  # weight decay coefficient\n",
        "model = tf.keras.models.Sequential([\n",
        "        vgg_base,\n",
        "        tf.keras.layers.Flatten(),\n",
        "        tf.keras.layers.Dropout(0.50),\n",
        "        tf.keras.layers.Dense(1024, activation='relu'),\n",
        "        tf.keras.layers.Dropout(0.20),        \n",
        "        tf.keras.layers.Dense(512, activation='relu'),\n",
        "        tf.keras.layers.Dropout(0.10),         \n",
        "        tf.keras.layers.Dense(1, activation='sigmoid')    \n",
        "    ])    \n",
        "vgg_base.trainable = False\n",
        "# model_vgg16.layers[-1].activation=None\n",
        "# for layer in model.layers:\n",
        "#     if isinstance(layer, keras.layers.Conv2D) or isinstance(layer, keras.layers.Dense):\n",
        "      # layer.add_loss(keras.regularizers.l2(alpha)(layer.kernel))\n",
        "#       layer.activation = sigmoid\n",
        "    # if hasattr(layer, 'bias_regularizer') and layer.use_bias:\n",
        "    #   layer.add_loss(keras.regularizers.l2(alpha)(layer.bias))\n",
        " \n",
        "model.compile(optimizer=Adam(lr=1e-4),\n",
        "                  loss='binary_crossentropy',#mse, binary_crossentropy\n",
        "                  metrics=['acc'])\n",
        "model.summary()"
      ],
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_15\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "vgg16 (Functional)           (None, 4, 4, 512)         14714688  \n",
            "_________________________________________________________________\n",
            "flatten_15 (Flatten)         (None, 8192)              0         \n",
            "_________________________________________________________________\n",
            "dropout_45 (Dropout)         (None, 8192)              0         \n",
            "_________________________________________________________________\n",
            "dense_45 (Dense)             (None, 1024)              8389632   \n",
            "_________________________________________________________________\n",
            "dropout_46 (Dropout)         (None, 1024)              0         \n",
            "_________________________________________________________________\n",
            "dense_46 (Dense)             (None, 512)               524800    \n",
            "_________________________________________________________________\n",
            "dropout_47 (Dropout)         (None, 512)               0         \n",
            "_________________________________________________________________\n",
            "dense_47 (Dense)             (None, 1)                 513       \n",
            "=================================================================\n",
            "Total params: 23,629,633\n",
            "Trainable params: 8,914,945\n",
            "Non-trainable params: 14,714,688\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "cq_UdcKD2kwy",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "fe33698a-33c9-4cfd-a257-d50f731deb02"
      },
      "source": [
        "from IPython.display import SVG\n",
        "from keras.utils.vis_utils import model_to_dot\n",
        "\n",
        "SVG(model_to_dot(model, show_shapes=True, dpi=70).create(prog='dot', format='svg'))"
      ],
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<IPython.core.display.SVG object>"
            ],
            "image/svg+xml": "<svg height=\"699pt\" viewBox=\"0.00 0.00 345.00 719.00\" width=\"335pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g class=\"graph\" id=\"graph0\" transform=\"scale(.9722 .9722) rotate(0) translate(4 715)\">\n<title>G</title>\n<polygon fill=\"#ffffff\" points=\"-4,4 -4,-715 341,-715 341,4 -4,4\" stroke=\"transparent\"/>\n<!-- 140534836247800 -->\n<g class=\"node\" id=\"node1\">\n<title>140534836247800</title>\n<polygon fill=\"none\" points=\"0,-664.5 0,-710.5 337,-710.5 337,-664.5 0,-664.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"81.5\" y=\"-683.8\">vgg16_input: InputLayer</text>\n<polyline fill=\"none\" points=\"163,-664.5 163,-710.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"192\" y=\"-695.3\">input:</text>\n<polyline fill=\"none\" points=\"163,-687.5 221,-687.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"192\" y=\"-672.3\">output:</text>\n<polyline fill=\"none\" points=\"221,-664.5 221,-710.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"279\" y=\"-695.3\">[(?, 150, 150, 3)]</text>\n<polyline fill=\"none\" points=\"221,-687.5 337,-687.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"279\" y=\"-672.3\">[(?, 150, 150, 3)]</text>\n</g>\n<!-- 140534836303296 -->\n<g class=\"node\" id=\"node2\">\n<title>140534836303296</title>\n<polygon fill=\"none\" points=\"24.5,-581.5 24.5,-627.5 312.5,-627.5 312.5,-581.5 24.5,-581.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"86\" y=\"-600.8\">vgg16: Functional</text>\n<polyline fill=\"none\" points=\"147.5,-581.5 147.5,-627.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"176.5\" y=\"-612.3\">input:</text>\n<polyline fill=\"none\" points=\"147.5,-604.5 205.5,-604.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"176.5\" y=\"-589.3\">output:</text>\n<polyline fill=\"none\" points=\"205.5,-581.5 205.5,-627.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"259\" y=\"-612.3\">(?, 150, 150, 3)</text>\n<polyline fill=\"none\" points=\"205.5,-604.5 312.5,-604.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"259\" y=\"-589.3\">(?, 4, 4, 512)</text>\n</g>\n<!-- 140534836247800&#45;&gt;140534836303296 -->\n<g class=\"edge\" id=\"edge1\">\n<title>140534836247800-&gt;140534836303296</title>\n<path d=\"M168.5,-664.3799C168.5,-656.1745 168.5,-646.7679 168.5,-637.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-637.784 168.5,-627.784 165.0001,-637.784 172.0001,-637.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140534836149384 -->\n<g class=\"node\" id=\"node3\">\n<title>140534836149384</title>\n<polygon fill=\"none\" points=\"33,-498.5 33,-544.5 304,-544.5 304,-498.5 33,-498.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"93.5\" y=\"-517.8\">flatten_15: Flatten</text>\n<polyline fill=\"none\" points=\"154,-498.5 154,-544.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"183\" y=\"-529.3\">input:</text>\n<polyline fill=\"none\" points=\"154,-521.5 212,-521.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"183\" y=\"-506.3\">output:</text>\n<polyline fill=\"none\" points=\"212,-498.5 212,-544.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"258\" y=\"-529.3\">(?, 4, 4, 512)</text>\n<polyline fill=\"none\" points=\"212,-521.5 304,-521.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"258\" y=\"-506.3\">(?, 8192)</text>\n</g>\n<!-- 140534836303296&#45;&gt;140534836149384 -->\n<g class=\"edge\" id=\"edge2\">\n<title>140534836303296-&gt;140534836149384</title>\n<path d=\"M168.5,-581.3799C168.5,-573.1745 168.5,-563.7679 168.5,-554.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-554.784 168.5,-544.784 165.0001,-554.784 172.0001,-554.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140534836244608 -->\n<g class=\"node\" id=\"node4\">\n<title>140534836244608</title>\n<polygon fill=\"none\" points=\"34.5,-415.5 34.5,-461.5 302.5,-461.5 302.5,-415.5 34.5,-415.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"105\" y=\"-434.8\">dropout_45: Dropout</text>\n<polyline fill=\"none\" points=\"175.5,-415.5 175.5,-461.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"204.5\" y=\"-446.3\">input:</text>\n<polyline fill=\"none\" points=\"175.5,-438.5 233.5,-438.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"204.5\" y=\"-423.3\">output:</text>\n<polyline fill=\"none\" points=\"233.5,-415.5 233.5,-461.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-446.3\">(?, 8192)</text>\n<polyline fill=\"none\" points=\"233.5,-438.5 302.5,-438.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-423.3\">(?, 8192)</text>\n</g>\n<!-- 140534836149384&#45;&gt;140534836244608 -->\n<g class=\"edge\" id=\"edge3\">\n<title>140534836149384-&gt;140534836244608</title>\n<path d=\"M168.5,-498.3799C168.5,-490.1745 168.5,-480.7679 168.5,-471.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-471.784 168.5,-461.784 165.0001,-471.784 172.0001,-471.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140534836245000 -->\n<g class=\"node\" id=\"node5\">\n<title>140534836245000</title>\n<polygon fill=\"none\" points=\"48,-332.5 48,-378.5 289,-378.5 289,-332.5 48,-332.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"105\" y=\"-351.8\">dense_45: Dense</text>\n<polyline fill=\"none\" points=\"162,-332.5 162,-378.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"191\" y=\"-363.3\">input:</text>\n<polyline fill=\"none\" points=\"162,-355.5 220,-355.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"191\" y=\"-340.3\">output:</text>\n<polyline fill=\"none\" points=\"220,-332.5 220,-378.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-363.3\">(?, 8192)</text>\n<polyline fill=\"none\" points=\"220,-355.5 289,-355.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-340.3\">(?, 1024)</text>\n</g>\n<!-- 140534836244608&#45;&gt;140534836245000 -->\n<g class=\"edge\" id=\"edge4\">\n<title>140534836244608-&gt;140534836245000</title>\n<path d=\"M168.5,-415.3799C168.5,-407.1745 168.5,-397.7679 168.5,-388.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-388.784 168.5,-378.784 165.0001,-388.784 172.0001,-388.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140534836245504 -->\n<g class=\"node\" id=\"node6\">\n<title>140534836245504</title>\n<polygon fill=\"none\" points=\"34.5,-249.5 34.5,-295.5 302.5,-295.5 302.5,-249.5 34.5,-249.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"105\" y=\"-268.8\">dropout_46: Dropout</text>\n<polyline fill=\"none\" points=\"175.5,-249.5 175.5,-295.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"204.5\" y=\"-280.3\">input:</text>\n<polyline fill=\"none\" points=\"175.5,-272.5 233.5,-272.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"204.5\" y=\"-257.3\">output:</text>\n<polyline fill=\"none\" points=\"233.5,-249.5 233.5,-295.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-280.3\">(?, 1024)</text>\n<polyline fill=\"none\" points=\"233.5,-272.5 302.5,-272.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-257.3\">(?, 1024)</text>\n</g>\n<!-- 140534836245000&#45;&gt;140534836245504 -->\n<g class=\"edge\" id=\"edge5\">\n<title>140534836245000-&gt;140534836245504</title>\n<path d=\"M168.5,-332.3799C168.5,-324.1745 168.5,-314.7679 168.5,-305.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-305.784 168.5,-295.784 165.0001,-305.784 172.0001,-305.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140534836245784 -->\n<g class=\"node\" id=\"node7\">\n<title>140534836245784</title>\n<polygon fill=\"none\" points=\"48,-166.5 48,-212.5 289,-212.5 289,-166.5 48,-166.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"105\" y=\"-185.8\">dense_46: Dense</text>\n<polyline fill=\"none\" points=\"162,-166.5 162,-212.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"191\" y=\"-197.3\">input:</text>\n<polyline fill=\"none\" points=\"162,-189.5 220,-189.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"191\" y=\"-174.3\">output:</text>\n<polyline fill=\"none\" points=\"220,-166.5 220,-212.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-197.3\">(?, 1024)</text>\n<polyline fill=\"none\" points=\"220,-189.5 289,-189.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-174.3\">(?, 512)</text>\n</g>\n<!-- 140534836245504&#45;&gt;140534836245784 -->\n<g class=\"edge\" id=\"edge6\">\n<title>140534836245504-&gt;140534836245784</title>\n<path d=\"M168.5,-249.3799C168.5,-241.1745 168.5,-231.7679 168.5,-222.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-222.784 168.5,-212.784 165.0001,-222.784 172.0001,-222.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140534836246288 -->\n<g class=\"node\" id=\"node8\">\n<title>140534836246288</title>\n<polygon fill=\"none\" points=\"38,-83.5 38,-129.5 299,-129.5 299,-83.5 38,-83.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"108.5\" y=\"-102.8\">dropout_47: Dropout</text>\n<polyline fill=\"none\" points=\"179,-83.5 179,-129.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"208\" y=\"-114.3\">input:</text>\n<polyline fill=\"none\" points=\"179,-106.5 237,-106.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"208\" y=\"-91.3\">output:</text>\n<polyline fill=\"none\" points=\"237,-83.5 237,-129.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-114.3\">(?, 512)</text>\n<polyline fill=\"none\" points=\"237,-106.5 299,-106.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-91.3\">(?, 512)</text>\n</g>\n<!-- 140534836245784&#45;&gt;140534836246288 -->\n<g class=\"edge\" id=\"edge7\">\n<title>140534836245784-&gt;140534836246288</title>\n<path d=\"M168.5,-166.3799C168.5,-158.1745 168.5,-148.7679 168.5,-139.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-139.784 168.5,-129.784 165.0001,-139.784 172.0001,-139.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140534836246568 -->\n<g class=\"node\" id=\"node9\">\n<title>140534836246568</title>\n<polygon fill=\"none\" points=\"51.5,-.5 51.5,-46.5 285.5,-46.5 285.5,-.5 51.5,-.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"108.5\" y=\"-19.8\">dense_47: Dense</text>\n<polyline fill=\"none\" points=\"165.5,-.5 165.5,-46.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"194.5\" y=\"-31.3\">input:</text>\n<polyline fill=\"none\" points=\"165.5,-23.5 223.5,-23.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"194.5\" y=\"-8.3\">output:</text>\n<polyline fill=\"none\" points=\"223.5,-.5 223.5,-46.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-31.3\">(?, 512)</text>\n<polyline fill=\"none\" points=\"223.5,-23.5 285.5,-23.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-8.3\">(?, 1)</text>\n</g>\n<!-- 140534836246288&#45;&gt;140534836246568 -->\n<g class=\"edge\" id=\"edge8\">\n<title>140534836246288-&gt;140534836246568</title>\n<path d=\"M168.5,-83.3799C168.5,-75.1745 168.5,-65.7679 168.5,-56.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-56.784 168.5,-46.784 165.0001,-56.784 172.0001,-56.784\" stroke=\"#000000\"/>\n</g>\n</g>\n</svg>"
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "hrWUlGFk2YUG",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "ee03210e-857b-4fd3-96a4-81c0f2847f6f"
      },
      "source": [
        "hist = model.fit_generator(\n",
        "    train_generator,\n",
        "    steps_per_epoch=train_steps,\n",
        "    epochs=50,\n",
        "    validation_data=eval_generator,\n",
        "    validation_steps=val_steps)"
      ],
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.3542 - acc: 0.8408 - val_loss: 0.2594 - val_acc: 0.8836\n",
            "Epoch 2/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.2750 - acc: 0.8794 - val_loss: 0.2652 - val_acc: 0.8890\n",
            "Epoch 3/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2476 - acc: 0.8962 - val_loss: 0.2561 - val_acc: 0.8890\n",
            "Epoch 4/50\n",
            "312/312 [==============================] - 50s 162ms/step - loss: 0.2390 - acc: 0.8974 - val_loss: 0.2368 - val_acc: 0.8974\n",
            "Epoch 5/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2279 - acc: 0.9024 - val_loss: 0.2477 - val_acc: 0.8956\n",
            "Epoch 6/50\n",
            "312/312 [==============================] - 51s 165ms/step - loss: 0.2124 - acc: 0.9114 - val_loss: 0.2216 - val_acc: 0.9060\n",
            "Epoch 7/50\n",
            "312/312 [==============================] - 50s 161ms/step - loss: 0.2048 - acc: 0.9101 - val_loss: 0.2324 - val_acc: 0.9006\n",
            "Epoch 8/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.1923 - acc: 0.9183 - val_loss: 0.2529 - val_acc: 0.8946\n",
            "Epoch 9/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.1886 - acc: 0.9182 - val_loss: 0.2246 - val_acc: 0.9054\n",
            "Epoch 10/50\n",
            "312/312 [==============================] - 51s 162ms/step - loss: 0.1757 - acc: 0.9275 - val_loss: 0.2261 - val_acc: 0.9032\n",
            "Epoch 11/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.1815 - acc: 0.9263 - val_loss: 0.2464 - val_acc: 0.8926\n",
            "Epoch 12/50\n",
            "312/312 [==============================] - 51s 162ms/step - loss: 0.1737 - acc: 0.9254 - val_loss: 0.2359 - val_acc: 0.9044\n",
            "Epoch 13/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.1626 - acc: 0.9312 - val_loss: 0.2218 - val_acc: 0.9056\n",
            "Epoch 14/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.1550 - acc: 0.9345 - val_loss: 0.2216 - val_acc: 0.9087\n",
            "Epoch 15/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.1517 - acc: 0.9369 - val_loss: 0.2154 - val_acc: 0.9109\n",
            "Epoch 16/50\n",
            "312/312 [==============================] - 52s 165ms/step - loss: 0.1462 - acc: 0.9407 - val_loss: 0.2190 - val_acc: 0.9115\n",
            "Epoch 17/50\n",
            "312/312 [==============================] - 52s 165ms/step - loss: 0.1375 - acc: 0.9427 - val_loss: 0.2236 - val_acc: 0.9123\n",
            "Epoch 18/50\n",
            "312/312 [==============================] - 51s 162ms/step - loss: 0.1330 - acc: 0.9423 - val_loss: 0.2182 - val_acc: 0.9117\n",
            "Epoch 19/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.1234 - acc: 0.9493 - val_loss: 0.2585 - val_acc: 0.9028\n",
            "Epoch 20/50\n",
            "312/312 [==============================] - 51s 162ms/step - loss: 0.1152 - acc: 0.9517 - val_loss: 0.2322 - val_acc: 0.9089\n",
            "Epoch 21/50\n",
            "312/312 [==============================] - 50s 162ms/step - loss: 0.1121 - acc: 0.9539 - val_loss: 0.2600 - val_acc: 0.9073\n",
            "Epoch 22/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.0996 - acc: 0.9605 - val_loss: 0.2427 - val_acc: 0.9105\n",
            "Epoch 23/50\n",
            "312/312 [==============================] - 52s 167ms/step - loss: 0.0959 - acc: 0.9614 - val_loss: 0.2440 - val_acc: 0.9115\n",
            "Epoch 24/50\n",
            "312/312 [==============================] - 52s 165ms/step - loss: 0.0954 - acc: 0.9612 - val_loss: 0.2396 - val_acc: 0.9109\n",
            "Epoch 25/50\n",
            "312/312 [==============================] - 52s 165ms/step - loss: 0.0852 - acc: 0.9660 - val_loss: 0.2450 - val_acc: 0.9159\n",
            "Epoch 26/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.0839 - acc: 0.9651 - val_loss: 0.2407 - val_acc: 0.9113\n",
            "Epoch 27/50\n",
            "312/312 [==============================] - 50s 161ms/step - loss: 0.0773 - acc: 0.9690 - val_loss: 0.2523 - val_acc: 0.9117\n",
            "Epoch 28/50\n",
            "312/312 [==============================] - 50s 159ms/step - loss: 0.0768 - acc: 0.9703 - val_loss: 0.2575 - val_acc: 0.9042\n",
            "Epoch 29/50\n",
            "312/312 [==============================] - 50s 159ms/step - loss: 0.0664 - acc: 0.9731 - val_loss: 0.2607 - val_acc: 0.9127\n",
            "Epoch 30/50\n",
            "312/312 [==============================] - 49s 158ms/step - loss: 0.0637 - acc: 0.9754 - val_loss: 0.2642 - val_acc: 0.9097\n",
            "Epoch 31/50\n",
            "312/312 [==============================] - 49s 157ms/step - loss: 0.0611 - acc: 0.9755 - val_loss: 0.2564 - val_acc: 0.9125\n",
            "Epoch 32/50\n",
            "312/312 [==============================] - 49s 157ms/step - loss: 0.0593 - acc: 0.9773 - val_loss: 0.2611 - val_acc: 0.9109\n",
            "Epoch 33/50\n",
            "312/312 [==============================] - 49s 157ms/step - loss: 0.0532 - acc: 0.9794 - val_loss: 0.2804 - val_acc: 0.9131\n",
            "Epoch 34/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0505 - acc: 0.9814 - val_loss: 0.2864 - val_acc: 0.9073\n",
            "Epoch 35/50\n",
            "312/312 [==============================] - 49s 158ms/step - loss: 0.0454 - acc: 0.9832 - val_loss: 0.2777 - val_acc: 0.9111\n",
            "Epoch 36/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0490 - acc: 0.9810 - val_loss: 0.2695 - val_acc: 0.9079\n",
            "Epoch 37/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0471 - acc: 0.9824 - val_loss: 0.2933 - val_acc: 0.9113\n",
            "Epoch 38/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0455 - acc: 0.9818 - val_loss: 0.2935 - val_acc: 0.9101\n",
            "Epoch 39/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0430 - acc: 0.9826 - val_loss: 0.2813 - val_acc: 0.9149\n",
            "Epoch 40/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0419 - acc: 0.9838 - val_loss: 0.2896 - val_acc: 0.9153\n",
            "Epoch 41/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0400 - acc: 0.9845 - val_loss: 0.3069 - val_acc: 0.9153\n",
            "Epoch 42/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0404 - acc: 0.9850 - val_loss: 0.3041 - val_acc: 0.9113\n",
            "Epoch 43/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0366 - acc: 0.9864 - val_loss: 0.2848 - val_acc: 0.9147\n",
            "Epoch 44/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0334 - acc: 0.9870 - val_loss: 0.3112 - val_acc: 0.9125\n",
            "Epoch 45/50\n",
            "312/312 [==============================] - 49s 157ms/step - loss: 0.0349 - acc: 0.9873 - val_loss: 0.3030 - val_acc: 0.9143\n",
            "Epoch 46/50\n",
            "312/312 [==============================] - 49s 158ms/step - loss: 0.0312 - acc: 0.9876 - val_loss: 0.3586 - val_acc: 0.9014\n",
            "Epoch 47/50\n",
            "312/312 [==============================] - 49s 157ms/step - loss: 0.0328 - acc: 0.9875 - val_loss: 0.3188 - val_acc: 0.9179\n",
            "Epoch 48/50\n",
            "312/312 [==============================] - 50s 160ms/step - loss: 0.0317 - acc: 0.9877 - val_loss: 0.3313 - val_acc: 0.9111\n",
            "Epoch 49/50\n",
            "312/312 [==============================] - 50s 160ms/step - loss: 0.0286 - acc: 0.9882 - val_loss: 0.3792 - val_acc: 0.9060\n",
            "Epoch 50/50\n",
            "312/312 [==============================] - 50s 161ms/step - loss: 0.0250 - acc: 0.9907 - val_loss: 0.3554 - val_acc: 0.9073\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "rBVRlLmn2YUI",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "b5fdf633-eb51-4a9d-d4d6-9bb096890060"
      },
      "source": [
        "kru.show_plots(hist.history, plot_title='Using VGG16')"
      ],
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "agbd40QM2YUK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "d19164e0-030a-4826-b39e-733f1177582f"
      },
      "source": [
        "# 성능 평가\n",
        "loss, acc = model.evaluate_generator(train_generator, steps=train_steps, verbose=1)\n",
        "print('Training data  -> loss: %.3f, acc: %.3f' % (loss, acc))\n",
        "loss, acc = model.evaluate_generator(eval_generator, steps=val_steps, verbose=1)\n",
        "print('Cross-val data -> loss: %.3f, acc: %.3f' % (loss, acc))\n",
        "loss, acc = model.evaluate_generator(test_generator, steps=test_steps, verbose=1)\n",
        "print('Testing data   -> loss: %.3f, acc: %.3f' % (loss, acc))"
      ],
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "312/312 [==============================] - 34s 108ms/step - loss: 0.0023 - acc: 0.9999\n",
            "Training data  -> loss: 0.002, acc: 1.000\n",
            "156/156 [==============================] - 17s 108ms/step - loss: 0.3556 - acc: 0.9073\n",
            "Cross-val data -> loss: 0.356, acc: 0.907\n",
            "62/62 [==============================] - 7s 106ms/step - loss: 0.3730 - acc: 0.9052\n",
            "Testing data   -> loss: 0.373, acc: 0.905\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T-3yx8um7usX",
        "colab_type": "text"
      },
      "source": [
        "# mse 인 vgg16"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "j5fgtKwO79qJ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 448
        },
        "outputId": "7b29e052-6cf7-48bf-9e29-ef573ca9b29f"
      },
      "source": [
        "from keras.activations import softmax, relu, sigmoid\n",
        " \n",
        "vgg_base = keras.applications.VGG16(include_top=False, weights='imagenet',input_shape=(IMAGE_HEIGHT, IMAGE_WIDTH, NUM_CHANNELS))\n",
        "alpha = 0.00002  # weight decay coefficient\n",
        "model = tf.keras.models.Sequential([\n",
        "        vgg_base,\n",
        "        tf.keras.layers.Flatten(),\n",
        "        tf.keras.layers.Dropout(0.50),\n",
        "        tf.keras.layers.Dense(1024, activation='relu'),\n",
        "        tf.keras.layers.Dropout(0.20),        \n",
        "        tf.keras.layers.Dense(512, activation='relu'),\n",
        "        tf.keras.layers.Dropout(0.10),         \n",
        "        tf.keras.layers.Dense(1, activation='sigmoid')    \n",
        "    ])    \n",
        "vgg_base.trainable = False\n",
        "# model_vgg16.layers[-1].activation=None\n",
        "#for layer in model.layers:\n",
        "#    if isinstance(layer, keras.layers.Conv2D) or isinstance(layer, keras.layers.Dense):\n",
        "      # layer.add_loss(keras.regularizers.l2(alpha)(layer.kernel))\n",
        "      # layer.activation = sigmoid\n",
        "    # if hasattr(layer, 'bias_regularizer') and layer.use_bias:\n",
        "    #   layer.add_loss(keras.regularizers.l2(alpha)(layer.bias))\n",
        " \n",
        "model.compile(optimizer=Adam(lr=1e-4),\n",
        "                  loss='mse',#mse, binary_crossentropy\n",
        "                  metrics=['acc'])\n",
        "model.summary()"
      ],
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_16\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "vgg16 (Functional)           (None, 4, 4, 512)         14714688  \n",
            "_________________________________________________________________\n",
            "flatten_16 (Flatten)         (None, 8192)              0         \n",
            "_________________________________________________________________\n",
            "dropout_48 (Dropout)         (None, 8192)              0         \n",
            "_________________________________________________________________\n",
            "dense_48 (Dense)             (None, 1024)              8389632   \n",
            "_________________________________________________________________\n",
            "dropout_49 (Dropout)         (None, 1024)              0         \n",
            "_________________________________________________________________\n",
            "dense_49 (Dense)             (None, 512)               524800    \n",
            "_________________________________________________________________\n",
            "dropout_50 (Dropout)         (None, 512)               0         \n",
            "_________________________________________________________________\n",
            "dense_50 (Dense)             (None, 1)                 513       \n",
            "=================================================================\n",
            "Total params: 23,629,633\n",
            "Trainable params: 8,914,945\n",
            "Non-trainable params: 14,714,688\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "Bo_otoFV79qN",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 973
        },
        "outputId": "31a5d18a-f86d-4be0-b052-ff77fdb3365d"
      },
      "source": [
        "from IPython.display import SVG\n",
        "from keras.utils.vis_utils import model_to_dot\n",
        "\n",
        "SVG(model_to_dot(model, show_shapes=True, dpi=70).create(prog='dot', format='svg'))"
      ],
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<IPython.core.display.SVG object>"
            ],
            "image/svg+xml": "<svg height=\"699pt\" viewBox=\"0.00 0.00 345.00 719.00\" width=\"335pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g class=\"graph\" id=\"graph0\" transform=\"scale(.9722 .9722) rotate(0) translate(4 715)\">\n<title>G</title>\n<polygon fill=\"#ffffff\" points=\"-4,4 -4,-715 341,-715 341,4 -4,4\" stroke=\"transparent\"/>\n<!-- 140526941354136 -->\n<g class=\"node\" id=\"node1\">\n<title>140526941354136</title>\n<polygon fill=\"none\" points=\"0,-664.5 0,-710.5 337,-710.5 337,-664.5 0,-664.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"81.5\" y=\"-683.8\">vgg16_input: InputLayer</text>\n<polyline fill=\"none\" points=\"163,-664.5 163,-710.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"192\" y=\"-695.3\">input:</text>\n<polyline fill=\"none\" points=\"163,-687.5 221,-687.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"192\" y=\"-672.3\">output:</text>\n<polyline fill=\"none\" points=\"221,-664.5 221,-710.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"279\" y=\"-695.3\">[(?, 150, 150, 3)]</text>\n<polyline fill=\"none\" points=\"221,-687.5 337,-687.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"279\" y=\"-672.3\">[(?, 150, 150, 3)]</text>\n</g>\n<!-- 140526941734392 -->\n<g class=\"node\" id=\"node2\">\n<title>140526941734392</title>\n<polygon fill=\"none\" points=\"24.5,-581.5 24.5,-627.5 312.5,-627.5 312.5,-581.5 24.5,-581.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"86\" y=\"-600.8\">vgg16: Functional</text>\n<polyline fill=\"none\" points=\"147.5,-581.5 147.5,-627.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"176.5\" y=\"-612.3\">input:</text>\n<polyline fill=\"none\" points=\"147.5,-604.5 205.5,-604.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"176.5\" y=\"-589.3\">output:</text>\n<polyline fill=\"none\" points=\"205.5,-581.5 205.5,-627.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"259\" y=\"-612.3\">(?, 150, 150, 3)</text>\n<polyline fill=\"none\" points=\"205.5,-604.5 312.5,-604.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"259\" y=\"-589.3\">(?, 4, 4, 512)</text>\n</g>\n<!-- 140526941354136&#45;&gt;140526941734392 -->\n<g class=\"edge\" id=\"edge1\">\n<title>140526941354136-&gt;140526941734392</title>\n<path d=\"M168.5,-664.3799C168.5,-656.1745 168.5,-646.7679 168.5,-637.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-637.784 168.5,-627.784 165.0001,-637.784 172.0001,-637.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140526941595520 -->\n<g class=\"node\" id=\"node3\">\n<title>140526941595520</title>\n<polygon fill=\"none\" points=\"33,-498.5 33,-544.5 304,-544.5 304,-498.5 33,-498.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"93.5\" y=\"-517.8\">flatten_16: Flatten</text>\n<polyline fill=\"none\" points=\"154,-498.5 154,-544.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"183\" y=\"-529.3\">input:</text>\n<polyline fill=\"none\" points=\"154,-521.5 212,-521.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"183\" y=\"-506.3\">output:</text>\n<polyline fill=\"none\" points=\"212,-498.5 212,-544.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"258\" y=\"-529.3\">(?, 4, 4, 512)</text>\n<polyline fill=\"none\" points=\"212,-521.5 304,-521.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"258\" y=\"-506.3\">(?, 8192)</text>\n</g>\n<!-- 140526941734392&#45;&gt;140526941595520 -->\n<g class=\"edge\" id=\"edge2\">\n<title>140526941734392-&gt;140526941595520</title>\n<path d=\"M168.5,-581.3799C168.5,-573.1745 168.5,-563.7679 168.5,-554.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-554.784 168.5,-544.784 165.0001,-554.784 172.0001,-554.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140526941821360 -->\n<g class=\"node\" id=\"node4\">\n<title>140526941821360</title>\n<polygon fill=\"none\" points=\"34.5,-415.5 34.5,-461.5 302.5,-461.5 302.5,-415.5 34.5,-415.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"105\" y=\"-434.8\">dropout_48: Dropout</text>\n<polyline fill=\"none\" points=\"175.5,-415.5 175.5,-461.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"204.5\" y=\"-446.3\">input:</text>\n<polyline fill=\"none\" points=\"175.5,-438.5 233.5,-438.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"204.5\" y=\"-423.3\">output:</text>\n<polyline fill=\"none\" points=\"233.5,-415.5 233.5,-461.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-446.3\">(?, 8192)</text>\n<polyline fill=\"none\" points=\"233.5,-438.5 302.5,-438.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-423.3\">(?, 8192)</text>\n</g>\n<!-- 140526941595520&#45;&gt;140526941821360 -->\n<g class=\"edge\" id=\"edge3\">\n<title>140526941595520-&gt;140526941821360</title>\n<path d=\"M168.5,-498.3799C168.5,-490.1745 168.5,-480.7679 168.5,-471.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-471.784 168.5,-461.784 165.0001,-471.784 172.0001,-471.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140526941822312 -->\n<g class=\"node\" id=\"node5\">\n<title>140526941822312</title>\n<polygon fill=\"none\" points=\"48,-332.5 48,-378.5 289,-378.5 289,-332.5 48,-332.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"105\" y=\"-351.8\">dense_48: Dense</text>\n<polyline fill=\"none\" points=\"162,-332.5 162,-378.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"191\" y=\"-363.3\">input:</text>\n<polyline fill=\"none\" points=\"162,-355.5 220,-355.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"191\" y=\"-340.3\">output:</text>\n<polyline fill=\"none\" points=\"220,-332.5 220,-378.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-363.3\">(?, 8192)</text>\n<polyline fill=\"none\" points=\"220,-355.5 289,-355.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-340.3\">(?, 1024)</text>\n</g>\n<!-- 140526941821360&#45;&gt;140526941822312 -->\n<g class=\"edge\" id=\"edge4\">\n<title>140526941821360-&gt;140526941822312</title>\n<path d=\"M168.5,-415.3799C168.5,-407.1745 168.5,-397.7679 168.5,-388.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-388.784 168.5,-378.784 165.0001,-388.784 172.0001,-388.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140526941822816 -->\n<g class=\"node\" id=\"node6\">\n<title>140526941822816</title>\n<polygon fill=\"none\" points=\"34.5,-249.5 34.5,-295.5 302.5,-295.5 302.5,-249.5 34.5,-249.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"105\" y=\"-268.8\">dropout_49: Dropout</text>\n<polyline fill=\"none\" points=\"175.5,-249.5 175.5,-295.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"204.5\" y=\"-280.3\">input:</text>\n<polyline fill=\"none\" points=\"175.5,-272.5 233.5,-272.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"204.5\" y=\"-257.3\">output:</text>\n<polyline fill=\"none\" points=\"233.5,-249.5 233.5,-295.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-280.3\">(?, 1024)</text>\n<polyline fill=\"none\" points=\"233.5,-272.5 302.5,-272.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-257.3\">(?, 1024)</text>\n</g>\n<!-- 140526941822312&#45;&gt;140526941822816 -->\n<g class=\"edge\" id=\"edge5\">\n<title>140526941822312-&gt;140526941822816</title>\n<path d=\"M168.5,-332.3799C168.5,-324.1745 168.5,-314.7679 168.5,-305.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-305.784 168.5,-295.784 165.0001,-305.784 172.0001,-305.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140526941352120 -->\n<g class=\"node\" id=\"node7\">\n<title>140526941352120</title>\n<polygon fill=\"none\" points=\"48,-166.5 48,-212.5 289,-212.5 289,-166.5 48,-166.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"105\" y=\"-185.8\">dense_49: Dense</text>\n<polyline fill=\"none\" points=\"162,-166.5 162,-212.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"191\" y=\"-197.3\">input:</text>\n<polyline fill=\"none\" points=\"162,-189.5 220,-189.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"191\" y=\"-174.3\">output:</text>\n<polyline fill=\"none\" points=\"220,-166.5 220,-212.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-197.3\">(?, 1024)</text>\n<polyline fill=\"none\" points=\"220,-189.5 289,-189.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-174.3\">(?, 512)</text>\n</g>\n<!-- 140526941822816&#45;&gt;140526941352120 -->\n<g class=\"edge\" id=\"edge6\">\n<title>140526941822816-&gt;140526941352120</title>\n<path d=\"M168.5,-249.3799C168.5,-241.1745 168.5,-231.7679 168.5,-222.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-222.784 168.5,-212.784 165.0001,-222.784 172.0001,-222.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140526941352624 -->\n<g class=\"node\" id=\"node8\">\n<title>140526941352624</title>\n<polygon fill=\"none\" points=\"38,-83.5 38,-129.5 299,-129.5 299,-83.5 38,-83.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"108.5\" y=\"-102.8\">dropout_50: Dropout</text>\n<polyline fill=\"none\" points=\"179,-83.5 179,-129.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"208\" y=\"-114.3\">input:</text>\n<polyline fill=\"none\" points=\"179,-106.5 237,-106.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"208\" y=\"-91.3\">output:</text>\n<polyline fill=\"none\" points=\"237,-83.5 237,-129.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-114.3\">(?, 512)</text>\n<polyline fill=\"none\" points=\"237,-106.5 299,-106.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-91.3\">(?, 512)</text>\n</g>\n<!-- 140526941352120&#45;&gt;140526941352624 -->\n<g class=\"edge\" id=\"edge7\">\n<title>140526941352120-&gt;140526941352624</title>\n<path d=\"M168.5,-166.3799C168.5,-158.1745 168.5,-148.7679 168.5,-139.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-139.784 168.5,-129.784 165.0001,-139.784 172.0001,-139.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140526941352904 -->\n<g class=\"node\" id=\"node9\">\n<title>140526941352904</title>\n<polygon fill=\"none\" points=\"51.5,-.5 51.5,-46.5 285.5,-46.5 285.5,-.5 51.5,-.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"108.5\" y=\"-19.8\">dense_50: Dense</text>\n<polyline fill=\"none\" points=\"165.5,-.5 165.5,-46.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"194.5\" y=\"-31.3\">input:</text>\n<polyline fill=\"none\" points=\"165.5,-23.5 223.5,-23.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"194.5\" y=\"-8.3\">output:</text>\n<polyline fill=\"none\" points=\"223.5,-.5 223.5,-46.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-31.3\">(?, 512)</text>\n<polyline fill=\"none\" points=\"223.5,-23.5 285.5,-23.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-8.3\">(?, 1)</text>\n</g>\n<!-- 140526941352624&#45;&gt;140526941352904 -->\n<g class=\"edge\" id=\"edge8\">\n<title>140526941352624-&gt;140526941352904</title>\n<path d=\"M168.5,-83.3799C168.5,-75.1745 168.5,-65.7679 168.5,-56.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-56.784 168.5,-46.784 165.0001,-56.784 172.0001,-56.784\" stroke=\"#000000\"/>\n</g>\n</g>\n</svg>"
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "NiD-J7-I79qP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "c25521c1-e721-44f5-b5e5-ff2bbe41e0a5"
      },
      "source": [
        "hist = model.fit_generator(\n",
        "    train_generator,\n",
        "    steps_per_epoch=train_steps,\n",
        "    epochs=50,\n",
        "    validation_data=eval_generator,\n",
        "    validation_steps=val_steps)"
      ],
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.1171 - acc: 0.8309 - val_loss: 0.0904 - val_acc: 0.8754\n",
            "Epoch 2/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.0847 - acc: 0.8836 - val_loss: 0.0788 - val_acc: 0.8910\n",
            "Epoch 3/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.0772 - acc: 0.8926 - val_loss: 0.0743 - val_acc: 0.8970\n",
            "Epoch 4/50\n",
            "312/312 [==============================] - 51s 165ms/step - loss: 0.0751 - acc: 0.8957 - val_loss: 0.0720 - val_acc: 0.9012\n",
            "Epoch 5/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.0712 - acc: 0.9029 - val_loss: 0.0716 - val_acc: 0.9002\n",
            "Epoch 6/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.0703 - acc: 0.9038 - val_loss: 0.0755 - val_acc: 0.8978\n",
            "Epoch 7/50\n",
            "312/312 [==============================] - 52s 166ms/step - loss: 0.0648 - acc: 0.9108 - val_loss: 0.0705 - val_acc: 0.9028\n",
            "Epoch 8/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.0609 - acc: 0.9178 - val_loss: 0.0697 - val_acc: 0.9071\n",
            "Epoch 9/50\n",
            "312/312 [==============================] - 51s 165ms/step - loss: 0.0614 - acc: 0.9167 - val_loss: 0.0825 - val_acc: 0.8890\n",
            "Epoch 10/50\n",
            "312/312 [==============================] - 50s 162ms/step - loss: 0.0579 - acc: 0.9223 - val_loss: 0.0705 - val_acc: 0.9046\n",
            "Epoch 11/50\n",
            "312/312 [==============================] - 50s 159ms/step - loss: 0.0594 - acc: 0.9183 - val_loss: 0.0671 - val_acc: 0.9085\n",
            "Epoch 12/50\n",
            "312/312 [==============================] - 50s 159ms/step - loss: 0.0539 - acc: 0.9268 - val_loss: 0.0675 - val_acc: 0.9077\n",
            "Epoch 13/50\n",
            "312/312 [==============================] - 49s 158ms/step - loss: 0.0540 - acc: 0.9282 - val_loss: 0.0681 - val_acc: 0.9056\n",
            "Epoch 14/50\n",
            "312/312 [==============================] - 49s 157ms/step - loss: 0.0525 - acc: 0.9298 - val_loss: 0.0711 - val_acc: 0.9010\n",
            "Epoch 15/50\n",
            "312/312 [==============================] - 49s 157ms/step - loss: 0.0489 - acc: 0.9349 - val_loss: 0.0704 - val_acc: 0.9042\n",
            "Epoch 16/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0507 - acc: 0.9301 - val_loss: 0.0682 - val_acc: 0.9050\n",
            "Epoch 17/50\n",
            "312/312 [==============================] - 49s 157ms/step - loss: 0.0453 - acc: 0.9391 - val_loss: 0.0706 - val_acc: 0.9065\n",
            "Epoch 18/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0481 - acc: 0.9345 - val_loss: 0.0676 - val_acc: 0.9093\n",
            "Epoch 19/50\n",
            "312/312 [==============================] - 49s 157ms/step - loss: 0.0421 - acc: 0.9445 - val_loss: 0.0678 - val_acc: 0.9046\n",
            "Epoch 20/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0400 - acc: 0.9487 - val_loss: 0.0679 - val_acc: 0.9054\n",
            "Epoch 21/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0393 - acc: 0.9487 - val_loss: 0.0711 - val_acc: 0.9046\n",
            "Epoch 22/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0365 - acc: 0.9522 - val_loss: 0.0726 - val_acc: 0.9036\n",
            "Epoch 23/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0375 - acc: 0.9510 - val_loss: 0.0691 - val_acc: 0.9087\n",
            "Epoch 24/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0353 - acc: 0.9557 - val_loss: 0.0682 - val_acc: 0.9077\n",
            "Epoch 25/50\n",
            "312/312 [==============================] - 49s 157ms/step - loss: 0.0333 - acc: 0.9561 - val_loss: 0.0709 - val_acc: 0.9048\n",
            "Epoch 26/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0316 - acc: 0.9585 - val_loss: 0.0677 - val_acc: 0.9085\n",
            "Epoch 27/50\n",
            "312/312 [==============================] - 49s 157ms/step - loss: 0.0293 - acc: 0.9640 - val_loss: 0.0675 - val_acc: 0.9085\n",
            "Epoch 28/50\n",
            "312/312 [==============================] - 49s 157ms/step - loss: 0.0304 - acc: 0.9587 - val_loss: 0.0677 - val_acc: 0.9056\n",
            "Epoch 29/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0281 - acc: 0.9630 - val_loss: 0.0668 - val_acc: 0.9115\n",
            "Epoch 30/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0276 - acc: 0.9648 - val_loss: 0.0700 - val_acc: 0.9077\n",
            "Epoch 31/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0258 - acc: 0.9661 - val_loss: 0.0699 - val_acc: 0.9050\n",
            "Epoch 32/50\n",
            "312/312 [==============================] - 49s 158ms/step - loss: 0.0261 - acc: 0.9652 - val_loss: 0.0667 - val_acc: 0.9083\n",
            "Epoch 33/50\n",
            "312/312 [==============================] - 49s 157ms/step - loss: 0.0231 - acc: 0.9706 - val_loss: 0.0682 - val_acc: 0.9083\n",
            "Epoch 34/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0213 - acc: 0.9723 - val_loss: 0.0683 - val_acc: 0.9087\n",
            "Epoch 35/50\n",
            "312/312 [==============================] - 49s 157ms/step - loss: 0.0221 - acc: 0.9716 - val_loss: 0.0700 - val_acc: 0.9056\n",
            "Epoch 36/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0194 - acc: 0.9760 - val_loss: 0.0720 - val_acc: 0.9042\n",
            "Epoch 37/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0200 - acc: 0.9743 - val_loss: 0.0689 - val_acc: 0.9077\n",
            "Epoch 38/50\n",
            "312/312 [==============================] - 49s 158ms/step - loss: 0.0175 - acc: 0.9778 - val_loss: 0.0710 - val_acc: 0.9069\n",
            "Epoch 39/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0178 - acc: 0.9769 - val_loss: 0.0707 - val_acc: 0.9087\n",
            "Epoch 40/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0172 - acc: 0.9784 - val_loss: 0.0696 - val_acc: 0.9115\n",
            "Epoch 41/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0161 - acc: 0.9781 - val_loss: 0.0699 - val_acc: 0.9062\n",
            "Epoch 42/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0161 - acc: 0.9791 - val_loss: 0.0692 - val_acc: 0.9091\n",
            "Epoch 43/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0144 - acc: 0.9813 - val_loss: 0.0702 - val_acc: 0.9077\n",
            "Epoch 44/50\n",
            "312/312 [==============================] - 49s 157ms/step - loss: 0.0150 - acc: 0.9801 - val_loss: 0.0750 - val_acc: 0.9024\n",
            "Epoch 45/50\n",
            "312/312 [==============================] - 49s 157ms/step - loss: 0.0148 - acc: 0.9799 - val_loss: 0.0694 - val_acc: 0.9101\n",
            "Epoch 46/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0139 - acc: 0.9816 - val_loss: 0.0745 - val_acc: 0.9062\n",
            "Epoch 47/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0141 - acc: 0.9811 - val_loss: 0.0716 - val_acc: 0.9073\n",
            "Epoch 48/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0135 - acc: 0.9829 - val_loss: 0.0700 - val_acc: 0.9085\n",
            "Epoch 49/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0123 - acc: 0.9846 - val_loss: 0.0706 - val_acc: 0.9062\n",
            "Epoch 50/50\n",
            "312/312 [==============================] - 49s 156ms/step - loss: 0.0118 - acc: 0.9849 - val_loss: 0.0766 - val_acc: 0.9018\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "yLU_aOTk79qQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 116
        },
        "outputId": "1201c21d-0808-42db-b474-f357a7f188d2"
      },
      "source": [
        "kru.show_plots(hist.history, plot_title='Using VGG16 model')"
      ],
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "0mWRhVLU79qS",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 140
        },
        "outputId": "405c6655-2579-4706-f042-1bec50f09ba4"
      },
      "source": [
        "# 성능 평가\n",
        "loss, acc = model.evaluate_generator(train_generator, steps=train_steps, verbose=1)\n",
        "print('Training data  -> loss: %.3f, acc: %.3f' % (loss, acc))\n",
        "loss, acc = model.evaluate_generator(eval_generator, steps=val_steps, verbose=1)\n",
        "print('Cross-val data -> loss: %.3f, acc: %.3f' % (loss, acc))\n",
        "loss, acc = model.evaluate_generator(test_generator, steps=test_steps, verbose=1)\n",
        "print('Testing data   -> loss: %.3f, acc: %.3f' % (loss, acc))"
      ],
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "312/312 [==============================] - 33s 105ms/step - loss: 0.0029 - acc: 0.9975\n",
            "Training data  -> loss: 0.003, acc: 0.997\n",
            "156/156 [==============================] - 16s 104ms/step - loss: 0.0769 - acc: 0.9014\n",
            "Cross-val data -> loss: 0.077, acc: 0.901\n",
            "62/62 [==============================] - 6s 104ms/step - loss: 0.0845 - acc: 0.8936\n",
            "Testing data   -> loss: 0.085, acc: 0.894\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "voZTC5W_8dVq"
      },
      "source": [
        "# 활성함수가 sigmoid 이며 vgg16"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "tDjG0kwE8dVr",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "8d1aec19-7e4f-4dd7-c35f-e0321924a615"
      },
      "source": [
        "from keras.activations import softmax, relu, sigmoid\n",
        "\n",
        "vgg_base = keras.applications.VGG16(include_top=False, weights='imagenet',input_shape=(IMAGE_HEIGHT, IMAGE_WIDTH, NUM_CHANNELS))\n",
        "alpha = 0.00002  # weight decay coefficient\n",
        "for layer in vgg_base.layers:\n",
        "    if isinstance(layer, keras.layers.Conv2D) or isinstance(layer, keras.layers.Dense):\n",
        "      # layer.add_loss(keras.regularizers.l2(alpha)(layer.kernel))\n",
        "      layer.activation = sigmoid\n",
        "    # if hasattr(layer, 'bias_regularizer') and layer.use_bias:\n",
        "    #   layer.add_loss(keras.regularizers.l2(alpha)(layer.bias)\n",
        "    \n",
        "model = tf.keras.models.Sequential([\n",
        "        vgg_base,\n",
        "        tf.keras.layers.Flatten(),\n",
        "        tf.keras.layers.Dropout(0.50),\n",
        "        tf.keras.layers.Dense(1024, activation='relu'),\n",
        "        tf.keras.layers.Dropout(0.20),        \n",
        "        tf.keras.layers.Dense(512, activation='relu'),\n",
        "        tf.keras.layers.Dropout(0.10),         \n",
        "        tf.keras.layers.Dense(1, activation='sigmoid')    \n",
        "    ])    \n",
        "vgg_base.trainable = False\n",
        "# model_vgg16.layers[-1].activation=None\n",
        "for layer in model.layers:\n",
        "    if isinstance(layer, keras.layers.Conv2D) or isinstance(layer, keras.layers.Dense):\n",
        "      # layer.add_loss(keras.regularizers.l2(alpha)(layer.kernel))\n",
        "      layer.activation = sigmoid\n",
        "    # if hasattr(layer, 'bias_regularizer') and layer.use_bias:\n",
        "    #   layer.add_loss(keras.regularizers.l2(alpha)(layer.bias))\n",
        "\n",
        "model.compile(optimizer=Adam(lr=1e-4),\n",
        "                  loss='binary_crossentropy',#mse, binary_crossentropy\n",
        "                  metrics=['acc'])\n",
        "model.summary()"
      ],
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_17\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "vgg16 (Functional)           (None, 4, 4, 512)         14714688  \n",
            "_________________________________________________________________\n",
            "flatten_17 (Flatten)         (None, 8192)              0         \n",
            "_________________________________________________________________\n",
            "dropout_51 (Dropout)         (None, 8192)              0         \n",
            "_________________________________________________________________\n",
            "dense_51 (Dense)             (None, 1024)              8389632   \n",
            "_________________________________________________________________\n",
            "dropout_52 (Dropout)         (None, 1024)              0         \n",
            "_________________________________________________________________\n",
            "dense_52 (Dense)             (None, 512)               524800    \n",
            "_________________________________________________________________\n",
            "dropout_53 (Dropout)         (None, 512)               0         \n",
            "_________________________________________________________________\n",
            "dense_53 (Dense)             (None, 1)                 513       \n",
            "=================================================================\n",
            "Total params: 23,629,633\n",
            "Trainable params: 8,914,945\n",
            "Non-trainable params: 14,714,688\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "otZ2ft-V8dVu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "8f61cef4-3b97-4d65-ea7c-828f76f9eab1"
      },
      "source": [
        "from IPython.display import SVG\n",
        "from keras.utils.vis_utils import model_to_dot\n",
        "\n",
        "SVG(model_to_dot(model, show_shapes=True, dpi=70).create(prog='dot', format='svg'))"
      ],
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<IPython.core.display.SVG object>"
            ],
            "image/svg+xml": "<svg height=\"699pt\" viewBox=\"0.00 0.00 345.00 719.00\" width=\"335pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g class=\"graph\" id=\"graph0\" transform=\"scale(.9722 .9722) rotate(0) translate(4 715)\">\n<title>G</title>\n<polygon fill=\"#ffffff\" points=\"-4,4 -4,-715 341,-715 341,4 -4,4\" stroke=\"transparent\"/>\n<!-- 140535124842536 -->\n<g class=\"node\" id=\"node1\">\n<title>140535124842536</title>\n<polygon fill=\"none\" points=\"0,-664.5 0,-710.5 337,-710.5 337,-664.5 0,-664.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"81.5\" y=\"-683.8\">vgg16_input: InputLayer</text>\n<polyline fill=\"none\" points=\"163,-664.5 163,-710.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"192\" y=\"-695.3\">input:</text>\n<polyline fill=\"none\" points=\"163,-687.5 221,-687.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"192\" y=\"-672.3\">output:</text>\n<polyline fill=\"none\" points=\"221,-664.5 221,-710.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"279\" y=\"-695.3\">[(?, 150, 150, 3)]</text>\n<polyline fill=\"none\" points=\"221,-687.5 337,-687.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"279\" y=\"-672.3\">[(?, 150, 150, 3)]</text>\n</g>\n<!-- 140534828465624 -->\n<g class=\"node\" id=\"node2\">\n<title>140534828465624</title>\n<polygon fill=\"none\" points=\"24.5,-581.5 24.5,-627.5 312.5,-627.5 312.5,-581.5 24.5,-581.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"86\" y=\"-600.8\">vgg16: Functional</text>\n<polyline fill=\"none\" points=\"147.5,-581.5 147.5,-627.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"176.5\" y=\"-612.3\">input:</text>\n<polyline fill=\"none\" points=\"147.5,-604.5 205.5,-604.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"176.5\" y=\"-589.3\">output:</text>\n<polyline fill=\"none\" points=\"205.5,-581.5 205.5,-627.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"259\" y=\"-612.3\">(?, 150, 150, 3)</text>\n<polyline fill=\"none\" points=\"205.5,-604.5 312.5,-604.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"259\" y=\"-589.3\">(?, 4, 4, 512)</text>\n</g>\n<!-- 140535124842536&#45;&gt;140534828465624 -->\n<g class=\"edge\" id=\"edge1\">\n<title>140535124842536-&gt;140534828465624</title>\n<path d=\"M168.5,-664.3799C168.5,-656.1745 168.5,-646.7679 168.5,-637.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-637.784 168.5,-627.784 165.0001,-637.784 172.0001,-637.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140535127840696 -->\n<g class=\"node\" id=\"node3\">\n<title>140535127840696</title>\n<polygon fill=\"none\" points=\"33,-498.5 33,-544.5 304,-544.5 304,-498.5 33,-498.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"93.5\" y=\"-517.8\">flatten_17: Flatten</text>\n<polyline fill=\"none\" points=\"154,-498.5 154,-544.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"183\" y=\"-529.3\">input:</text>\n<polyline fill=\"none\" points=\"154,-521.5 212,-521.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"183\" y=\"-506.3\">output:</text>\n<polyline fill=\"none\" points=\"212,-498.5 212,-544.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"258\" y=\"-529.3\">(?, 4, 4, 512)</text>\n<polyline fill=\"none\" points=\"212,-521.5 304,-521.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"258\" y=\"-506.3\">(?, 8192)</text>\n</g>\n<!-- 140534828465624&#45;&gt;140535127840696 -->\n<g class=\"edge\" id=\"edge2\">\n<title>140534828465624-&gt;140535127840696</title>\n<path d=\"M168.5,-581.3799C168.5,-573.1745 168.5,-563.7679 168.5,-554.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-554.784 168.5,-544.784 165.0001,-554.784 172.0001,-554.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140535124656200 -->\n<g class=\"node\" id=\"node4\">\n<title>140535124656200</title>\n<polygon fill=\"none\" points=\"34.5,-415.5 34.5,-461.5 302.5,-461.5 302.5,-415.5 34.5,-415.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"105\" y=\"-434.8\">dropout_51: Dropout</text>\n<polyline fill=\"none\" points=\"175.5,-415.5 175.5,-461.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"204.5\" y=\"-446.3\">input:</text>\n<polyline fill=\"none\" points=\"175.5,-438.5 233.5,-438.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"204.5\" y=\"-423.3\">output:</text>\n<polyline fill=\"none\" points=\"233.5,-415.5 233.5,-461.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-446.3\">(?, 8192)</text>\n<polyline fill=\"none\" points=\"233.5,-438.5 302.5,-438.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-423.3\">(?, 8192)</text>\n</g>\n<!-- 140535127840696&#45;&gt;140535124656200 -->\n<g class=\"edge\" id=\"edge3\">\n<title>140535127840696-&gt;140535124656200</title>\n<path d=\"M168.5,-498.3799C168.5,-490.1745 168.5,-480.7679 168.5,-471.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-471.784 168.5,-461.784 165.0001,-471.784 172.0001,-471.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140535124202664 -->\n<g class=\"node\" id=\"node5\">\n<title>140535124202664</title>\n<polygon fill=\"none\" points=\"48,-332.5 48,-378.5 289,-378.5 289,-332.5 48,-332.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"105\" y=\"-351.8\">dense_51: Dense</text>\n<polyline fill=\"none\" points=\"162,-332.5 162,-378.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"191\" y=\"-363.3\">input:</text>\n<polyline fill=\"none\" points=\"162,-355.5 220,-355.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"191\" y=\"-340.3\">output:</text>\n<polyline fill=\"none\" points=\"220,-332.5 220,-378.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-363.3\">(?, 8192)</text>\n<polyline fill=\"none\" points=\"220,-355.5 289,-355.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-340.3\">(?, 1024)</text>\n</g>\n<!-- 140535124656200&#45;&gt;140535124202664 -->\n<g class=\"edge\" id=\"edge4\">\n<title>140535124656200-&gt;140535124202664</title>\n<path d=\"M168.5,-415.3799C168.5,-407.1745 168.5,-397.7679 168.5,-388.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-388.784 168.5,-378.784 165.0001,-388.784 172.0001,-388.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140535124843264 -->\n<g class=\"node\" id=\"node6\">\n<title>140535124843264</title>\n<polygon fill=\"none\" points=\"34.5,-249.5 34.5,-295.5 302.5,-295.5 302.5,-249.5 34.5,-249.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"105\" y=\"-268.8\">dropout_52: Dropout</text>\n<polyline fill=\"none\" points=\"175.5,-249.5 175.5,-295.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"204.5\" y=\"-280.3\">input:</text>\n<polyline fill=\"none\" points=\"175.5,-272.5 233.5,-272.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"204.5\" y=\"-257.3\">output:</text>\n<polyline fill=\"none\" points=\"233.5,-249.5 233.5,-295.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-280.3\">(?, 1024)</text>\n<polyline fill=\"none\" points=\"233.5,-272.5 302.5,-272.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-257.3\">(?, 1024)</text>\n</g>\n<!-- 140535124202664&#45;&gt;140535124843264 -->\n<g class=\"edge\" id=\"edge5\">\n<title>140535124202664-&gt;140535124843264</title>\n<path d=\"M168.5,-332.3799C168.5,-324.1745 168.5,-314.7679 168.5,-305.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-305.784 168.5,-295.784 165.0001,-305.784 172.0001,-305.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140535124844216 -->\n<g class=\"node\" id=\"node7\">\n<title>140535124844216</title>\n<polygon fill=\"none\" points=\"48,-166.5 48,-212.5 289,-212.5 289,-166.5 48,-166.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"105\" y=\"-185.8\">dense_52: Dense</text>\n<polyline fill=\"none\" points=\"162,-166.5 162,-212.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"191\" y=\"-197.3\">input:</text>\n<polyline fill=\"none\" points=\"162,-189.5 220,-189.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"191\" y=\"-174.3\">output:</text>\n<polyline fill=\"none\" points=\"220,-166.5 220,-212.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-197.3\">(?, 1024)</text>\n<polyline fill=\"none\" points=\"220,-189.5 289,-189.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-174.3\">(?, 512)</text>\n</g>\n<!-- 140535124843264&#45;&gt;140535124844216 -->\n<g class=\"edge\" id=\"edge6\">\n<title>140535124843264-&gt;140535124844216</title>\n<path d=\"M168.5,-249.3799C168.5,-241.1745 168.5,-231.7679 168.5,-222.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-222.784 168.5,-212.784 165.0001,-222.784 172.0001,-222.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140535124843824 -->\n<g class=\"node\" id=\"node8\">\n<title>140535124843824</title>\n<polygon fill=\"none\" points=\"38,-83.5 38,-129.5 299,-129.5 299,-83.5 38,-83.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"108.5\" y=\"-102.8\">dropout_53: Dropout</text>\n<polyline fill=\"none\" points=\"179,-83.5 179,-129.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"208\" y=\"-114.3\">input:</text>\n<polyline fill=\"none\" points=\"179,-106.5 237,-106.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"208\" y=\"-91.3\">output:</text>\n<polyline fill=\"none\" points=\"237,-83.5 237,-129.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-114.3\">(?, 512)</text>\n<polyline fill=\"none\" points=\"237,-106.5 299,-106.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-91.3\">(?, 512)</text>\n</g>\n<!-- 140535124844216&#45;&gt;140535124843824 -->\n<g class=\"edge\" id=\"edge7\">\n<title>140535124844216-&gt;140535124843824</title>\n<path d=\"M168.5,-166.3799C168.5,-158.1745 168.5,-148.7679 168.5,-139.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-139.784 168.5,-129.784 165.0001,-139.784 172.0001,-139.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140535124841920 -->\n<g class=\"node\" id=\"node9\">\n<title>140535124841920</title>\n<polygon fill=\"none\" points=\"51.5,-.5 51.5,-46.5 285.5,-46.5 285.5,-.5 51.5,-.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"108.5\" y=\"-19.8\">dense_53: Dense</text>\n<polyline fill=\"none\" points=\"165.5,-.5 165.5,-46.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"194.5\" y=\"-31.3\">input:</text>\n<polyline fill=\"none\" points=\"165.5,-23.5 223.5,-23.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"194.5\" y=\"-8.3\">output:</text>\n<polyline fill=\"none\" points=\"223.5,-.5 223.5,-46.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-31.3\">(?, 512)</text>\n<polyline fill=\"none\" points=\"223.5,-23.5 285.5,-23.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-8.3\">(?, 1)</text>\n</g>\n<!-- 140535124843824&#45;&gt;140535124841920 -->\n<g class=\"edge\" id=\"edge8\">\n<title>140535124843824-&gt;140535124841920</title>\n<path d=\"M168.5,-83.3799C168.5,-75.1745 168.5,-65.7679 168.5,-56.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-56.784 168.5,-46.784 165.0001,-56.784 172.0001,-56.784\" stroke=\"#000000\"/>\n</g>\n</g>\n</svg>"
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 86
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "S98GxzEA8dVw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "a3256bd5-4cd3-4656-e815-88f35dd935db"
      },
      "source": [
        "hist = model.fit_generator(\n",
        "    train_generator,\n",
        "    steps_per_epoch=train_steps,\n",
        "    epochs=50,\n",
        "    validation_data=eval_generator,\n",
        "    validation_steps=val_steps)"
      ],
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/50\n",
            "312/312 [==============================] - 52s 166ms/step - loss: 0.7095 - acc: 0.5025 - val_loss: 0.6945 - val_acc: 0.4998\n",
            "Epoch 2/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.7034 - acc: 0.5036 - val_loss: 0.6985 - val_acc: 0.5002\n",
            "Epoch 3/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.7026 - acc: 0.4970 - val_loss: 0.6938 - val_acc: 0.4996\n",
            "Epoch 4/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.7010 - acc: 0.4977 - val_loss: 0.7017 - val_acc: 0.5000\n",
            "Epoch 5/50\n",
            "312/312 [==============================] - 51s 165ms/step - loss: 0.7009 - acc: 0.4968 - val_loss: 0.6957 - val_acc: 0.5000\n",
            "Epoch 6/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.7031 - acc: 0.4959 - val_loss: 0.6943 - val_acc: 0.4998\n",
            "Epoch 7/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6992 - acc: 0.5036 - val_loss: 0.6949 - val_acc: 0.5004\n",
            "Epoch 8/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6979 - acc: 0.5071 - val_loss: 0.6941 - val_acc: 0.4996\n",
            "Epoch 9/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6990 - acc: 0.4949 - val_loss: 0.6932 - val_acc: 0.5004\n",
            "Epoch 10/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6964 - acc: 0.5104 - val_loss: 0.6955 - val_acc: 0.5002\n",
            "Epoch 11/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6981 - acc: 0.4989 - val_loss: 0.6933 - val_acc: 0.5002\n",
            "Epoch 12/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6977 - acc: 0.5018 - val_loss: 0.7076 - val_acc: 0.4998\n",
            "Epoch 13/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6963 - acc: 0.5011 - val_loss: 0.6933 - val_acc: 0.5000\n",
            "Epoch 14/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6961 - acc: 0.5079 - val_loss: 0.6932 - val_acc: 0.5000\n",
            "Epoch 15/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6948 - acc: 0.5119 - val_loss: 0.6933 - val_acc: 0.4996\n",
            "Epoch 16/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6968 - acc: 0.4979 - val_loss: 0.6948 - val_acc: 0.4998\n",
            "Epoch 17/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6957 - acc: 0.5029 - val_loss: 0.6969 - val_acc: 0.4998\n",
            "Epoch 18/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.6970 - acc: 0.4964 - val_loss: 0.6933 - val_acc: 0.5002\n",
            "Epoch 19/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6960 - acc: 0.4985 - val_loss: 0.6933 - val_acc: 0.5000\n",
            "Epoch 20/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6959 - acc: 0.4977 - val_loss: 0.6932 - val_acc: 0.4998\n",
            "Epoch 21/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6957 - acc: 0.5012 - val_loss: 0.6949 - val_acc: 0.5000\n",
            "Epoch 22/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.6951 - acc: 0.4971 - val_loss: 0.6937 - val_acc: 0.5000\n",
            "Epoch 23/50\n",
            "312/312 [==============================] - 51s 165ms/step - loss: 0.6960 - acc: 0.4958 - val_loss: 0.6932 - val_acc: 0.5004\n",
            "Epoch 24/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6947 - acc: 0.4955 - val_loss: 0.6932 - val_acc: 0.4998\n",
            "Epoch 25/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6951 - acc: 0.4939 - val_loss: 0.6932 - val_acc: 0.5002\n",
            "Epoch 26/50\n",
            "312/312 [==============================] - 51s 165ms/step - loss: 0.6946 - acc: 0.5001 - val_loss: 0.6952 - val_acc: 0.5000\n",
            "Epoch 27/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6953 - acc: 0.4975 - val_loss: 0.6932 - val_acc: 0.4996\n",
            "Epoch 28/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6950 - acc: 0.4999 - val_loss: 0.6932 - val_acc: 0.5002\n",
            "Epoch 29/50\n",
            "312/312 [==============================] - 51s 165ms/step - loss: 0.6947 - acc: 0.4941 - val_loss: 0.6933 - val_acc: 0.5002\n",
            "Epoch 30/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6942 - acc: 0.4887 - val_loss: 0.6934 - val_acc: 0.5000\n",
            "Epoch 31/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6942 - acc: 0.5038 - val_loss: 0.6932 - val_acc: 0.5004\n",
            "Epoch 32/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6943 - acc: 0.4965 - val_loss: 0.6933 - val_acc: 0.5004\n",
            "Epoch 33/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.6944 - acc: 0.4947 - val_loss: 0.6935 - val_acc: 0.5000\n",
            "Epoch 34/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.6937 - acc: 0.5081 - val_loss: 0.6945 - val_acc: 0.5000\n",
            "Epoch 35/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6939 - acc: 0.5000 - val_loss: 0.6939 - val_acc: 0.5004\n",
            "Epoch 36/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.6941 - acc: 0.4906 - val_loss: 0.6945 - val_acc: 0.5006\n",
            "Epoch 37/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.6944 - acc: 0.4889 - val_loss: 0.6940 - val_acc: 0.5002\n",
            "Epoch 38/50\n",
            "312/312 [==============================] - 51s 162ms/step - loss: 0.6935 - acc: 0.5044 - val_loss: 0.6934 - val_acc: 0.5000\n",
            "Epoch 39/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.6938 - acc: 0.5003 - val_loss: 0.6947 - val_acc: 0.5004\n",
            "Epoch 40/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.6939 - acc: 0.4916 - val_loss: 0.6932 - val_acc: 0.4994\n",
            "Epoch 41/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6937 - acc: 0.5004 - val_loss: 0.6936 - val_acc: 0.5002\n",
            "Epoch 42/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.6938 - acc: 0.4956 - val_loss: 0.6932 - val_acc: 0.4998\n",
            "Epoch 43/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6934 - acc: 0.4986 - val_loss: 0.6932 - val_acc: 0.4998\n",
            "Epoch 44/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.6938 - acc: 0.5020 - val_loss: 0.6933 - val_acc: 0.4998\n",
            "Epoch 45/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.6934 - acc: 0.5033 - val_loss: 0.6933 - val_acc: 0.5002\n",
            "Epoch 46/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.6932 - acc: 0.5046 - val_loss: 0.6933 - val_acc: 0.5004\n",
            "Epoch 47/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.6935 - acc: 0.5005 - val_loss: 0.6932 - val_acc: 0.5000\n",
            "Epoch 48/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.6934 - acc: 0.5058 - val_loss: 0.6933 - val_acc: 0.4998\n",
            "Epoch 49/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.6935 - acc: 0.5016 - val_loss: 0.6936 - val_acc: 0.5002\n",
            "Epoch 50/50\n",
            "312/312 [==============================] - 51s 162ms/step - loss: 0.6935 - acc: 0.5000 - val_loss: 0.6932 - val_acc: 0.5000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "InSvEYEK8dVz",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "2141fa59-4c4c-46e4-8e10-3d0e8381036e"
      },
      "source": [
        "kru.show_plots(hist.history, plot_title='Using VGG16 model')"
      ],
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "C7Ix6bBk8dV1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "151ee67e-ef78-4669-a270-a3e0e0486b5c"
      },
      "source": [
        "# 성능 평가\n",
        "loss, acc = model.evaluate_generator(train_generator, steps=train_steps, verbose=1)\n",
        "print('Training data  -> loss: %.3f, acc: %.3f' % (loss, acc))\n",
        "loss, acc = model.evaluate_generator(eval_generator, steps=val_steps, verbose=1)\n",
        "print('Cross-val data -> loss: %.3f, acc: %.3f' % (loss, acc))\n",
        "loss, acc = model.evaluate_generator(test_generator, steps=test_steps, verbose=1)\n",
        "print('Testing data   -> loss: %.3f, acc: %.3f' % (loss, acc))"
      ],
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "312/312 [==============================] - 34s 109ms/step - loss: 0.6932 - acc: 0.4997\n",
            "Training data  -> loss: 0.693, acc: 0.500\n",
            "156/156 [==============================] - 17s 109ms/step - loss: 0.6932 - acc: 0.5000\n",
            "Cross-val data -> loss: 0.693, acc: 0.500\n",
            "62/62 [==============================] - 7s 108ms/step - loss: 0.6932 - acc: 0.4990\n",
            "Testing data   -> loss: 0.693, acc: 0.499\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wbCMhPkxhezL",
        "colab_type": "text"
      },
      "source": [
        "# 활성함수가 sigmoid이며 mse 인 vgg16"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WAZMrJonrkYp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 448
        },
        "outputId": "88b0e53d-9809-4ef3-b00c-92b509aaa396"
      },
      "source": [
        "from keras.activations import softmax, relu, sigmoid\n",
        " \n",
        "vgg_base = keras.applications.VGG16(include_top=False, weights='imagenet',input_shape=(IMAGE_HEIGHT, IMAGE_WIDTH, NUM_CHANNELS))\n",
        "alpha = 0.00002  # weight decay coefficient\n",
        "for layer in vgg_base.layers:\n",
        "    if isinstance(layer, keras.layers.Conv2D) or isinstance(layer, keras.layers.Dense):\n",
        "      # layer.add_loss(keras.regularizers.l2(alpha)(layer.kernel))\n",
        "      layer.activation = sigmoid\n",
        "    # if hasattr(layer, 'bias_regularizer') and layer.use_bias:\n",
        "    #   layer.add_loss(keras.regularizers.l2(alpha)(layer.bias)\n",
        "    \n",
        "model = tf.keras.models.Sequential([\n",
        "        vgg_base,\n",
        "        tf.keras.layers.Flatten(),\n",
        "        tf.keras.layers.Dropout(0.50),\n",
        "        tf.keras.layers.Dense(1024, activation='relu'),\n",
        "        tf.keras.layers.Dropout(0.20),        \n",
        "        tf.keras.layers.Dense(512, activation='relu'),\n",
        "        tf.keras.layers.Dropout(0.10),         \n",
        "        tf.keras.layers.Dense(1, activation='sigmoid')    \n",
        "    ])    \n",
        "vgg_base.trainable = False\n",
        "# model_vgg16.layers[-1].activation=None\n",
        "for layer in model.layers:\n",
        "    if isinstance(layer, keras.layers.Conv2D) or isinstance(layer, keras.layers.Dense):\n",
        "      # layer.add_loss(keras.regularizers.l2(alpha)(layer.kernel))\n",
        "      layer.activation = sigmoid\n",
        "    # if hasattr(layer, 'bias_regularizer') and layer.use_bias:\n",
        "    #   layer.add_loss(keras.regularizers.l2(alpha)(layer.bias))\n",
        " \n",
        "model.compile(optimizer=Adam(lr=1e-4),\n",
        "                  loss='mse',#mse, binary_crossentropy\n",
        "                  metrics=['acc'])\n",
        "model.summary()"
      ],
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_18\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "vgg16 (Functional)           (None, 4, 4, 512)         14714688  \n",
            "_________________________________________________________________\n",
            "flatten_18 (Flatten)         (None, 8192)              0         \n",
            "_________________________________________________________________\n",
            "dropout_54 (Dropout)         (None, 8192)              0         \n",
            "_________________________________________________________________\n",
            "dense_54 (Dense)             (None, 1024)              8389632   \n",
            "_________________________________________________________________\n",
            "dropout_55 (Dropout)         (None, 1024)              0         \n",
            "_________________________________________________________________\n",
            "dense_55 (Dense)             (None, 512)               524800    \n",
            "_________________________________________________________________\n",
            "dropout_56 (Dropout)         (None, 512)               0         \n",
            "_________________________________________________________________\n",
            "dense_56 (Dense)             (None, 1)                 513       \n",
            "=================================================================\n",
            "Total params: 23,629,633\n",
            "Trainable params: 8,914,945\n",
            "Non-trainable params: 14,714,688\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tC95Tb90tQ20",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 973
        },
        "outputId": "ffbaf803-6646-4e94-c4ce-a6310b7b5d35"
      },
      "source": [
        "from IPython.display import SVG\n",
        "from keras.utils.vis_utils import model_to_dot\n",
        "\n",
        "SVG(model_to_dot(model, show_shapes=True, dpi=70).create(prog='dot', format='svg'))"
      ],
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<IPython.core.display.SVG object>"
            ],
            "image/svg+xml": "<svg height=\"699pt\" viewBox=\"0.00 0.00 345.00 719.00\" width=\"335pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g class=\"graph\" id=\"graph0\" transform=\"scale(.9722 .9722) rotate(0) translate(4 715)\">\n<title>G</title>\n<polygon fill=\"#ffffff\" points=\"-4,4 -4,-715 341,-715 341,4 -4,4\" stroke=\"transparent\"/>\n<!-- 140534790685472 -->\n<g class=\"node\" id=\"node1\">\n<title>140534790685472</title>\n<polygon fill=\"none\" points=\"0,-664.5 0,-710.5 337,-710.5 337,-664.5 0,-664.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"81.5\" y=\"-683.8\">vgg16_input: InputLayer</text>\n<polyline fill=\"none\" points=\"163,-664.5 163,-710.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"192\" y=\"-695.3\">input:</text>\n<polyline fill=\"none\" points=\"163,-687.5 221,-687.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"192\" y=\"-672.3\">output:</text>\n<polyline fill=\"none\" points=\"221,-664.5 221,-710.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"279\" y=\"-695.3\">[(?, 150, 150, 3)]</text>\n<polyline fill=\"none\" points=\"221,-687.5 337,-687.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"279\" y=\"-672.3\">[(?, 150, 150, 3)]</text>\n</g>\n<!-- 140534790842464 -->\n<g class=\"node\" id=\"node2\">\n<title>140534790842464</title>\n<polygon fill=\"none\" points=\"24.5,-581.5 24.5,-627.5 312.5,-627.5 312.5,-581.5 24.5,-581.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"86\" y=\"-600.8\">vgg16: Functional</text>\n<polyline fill=\"none\" points=\"147.5,-581.5 147.5,-627.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"176.5\" y=\"-612.3\">input:</text>\n<polyline fill=\"none\" points=\"147.5,-604.5 205.5,-604.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"176.5\" y=\"-589.3\">output:</text>\n<polyline fill=\"none\" points=\"205.5,-581.5 205.5,-627.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"259\" y=\"-612.3\">(?, 150, 150, 3)</text>\n<polyline fill=\"none\" points=\"205.5,-604.5 312.5,-604.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"259\" y=\"-589.3\">(?, 4, 4, 512)</text>\n</g>\n<!-- 140534790685472&#45;&gt;140534790842464 -->\n<g class=\"edge\" id=\"edge1\">\n<title>140534790685472-&gt;140534790842464</title>\n<path d=\"M168.5,-664.3799C168.5,-656.1745 168.5,-646.7679 168.5,-637.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-637.784 168.5,-627.784 165.0001,-637.784 172.0001,-637.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140535124844496 -->\n<g class=\"node\" id=\"node3\">\n<title>140535124844496</title>\n<polygon fill=\"none\" points=\"33,-498.5 33,-544.5 304,-544.5 304,-498.5 33,-498.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"93.5\" y=\"-517.8\">flatten_18: Flatten</text>\n<polyline fill=\"none\" points=\"154,-498.5 154,-544.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"183\" y=\"-529.3\">input:</text>\n<polyline fill=\"none\" points=\"154,-521.5 212,-521.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"183\" y=\"-506.3\">output:</text>\n<polyline fill=\"none\" points=\"212,-498.5 212,-544.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"258\" y=\"-529.3\">(?, 4, 4, 512)</text>\n<polyline fill=\"none\" points=\"212,-521.5 304,-521.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"258\" y=\"-506.3\">(?, 8192)</text>\n</g>\n<!-- 140534790842464&#45;&gt;140535124844496 -->\n<g class=\"edge\" id=\"edge2\">\n<title>140534790842464-&gt;140535124844496</title>\n<path d=\"M168.5,-581.3799C168.5,-573.1745 168.5,-563.7679 168.5,-554.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-554.784 168.5,-544.784 165.0001,-554.784 172.0001,-554.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140534790850880 -->\n<g class=\"node\" id=\"node4\">\n<title>140534790850880</title>\n<polygon fill=\"none\" points=\"34.5,-415.5 34.5,-461.5 302.5,-461.5 302.5,-415.5 34.5,-415.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"105\" y=\"-434.8\">dropout_54: Dropout</text>\n<polyline fill=\"none\" points=\"175.5,-415.5 175.5,-461.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"204.5\" y=\"-446.3\">input:</text>\n<polyline fill=\"none\" points=\"175.5,-438.5 233.5,-438.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"204.5\" y=\"-423.3\">output:</text>\n<polyline fill=\"none\" points=\"233.5,-415.5 233.5,-461.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-446.3\">(?, 8192)</text>\n<polyline fill=\"none\" points=\"233.5,-438.5 302.5,-438.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-423.3\">(?, 8192)</text>\n</g>\n<!-- 140535124844496&#45;&gt;140534790850880 -->\n<g class=\"edge\" id=\"edge3\">\n<title>140535124844496-&gt;140534790850880</title>\n<path d=\"M168.5,-498.3799C168.5,-490.1745 168.5,-480.7679 168.5,-471.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-471.784 168.5,-461.784 165.0001,-471.784 172.0001,-471.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140534790851608 -->\n<g class=\"node\" id=\"node5\">\n<title>140534790851608</title>\n<polygon fill=\"none\" points=\"48,-332.5 48,-378.5 289,-378.5 289,-332.5 48,-332.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"105\" y=\"-351.8\">dense_54: Dense</text>\n<polyline fill=\"none\" points=\"162,-332.5 162,-378.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"191\" y=\"-363.3\">input:</text>\n<polyline fill=\"none\" points=\"162,-355.5 220,-355.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"191\" y=\"-340.3\">output:</text>\n<polyline fill=\"none\" points=\"220,-332.5 220,-378.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-363.3\">(?, 8192)</text>\n<polyline fill=\"none\" points=\"220,-355.5 289,-355.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-340.3\">(?, 1024)</text>\n</g>\n<!-- 140534790850880&#45;&gt;140534790851608 -->\n<g class=\"edge\" id=\"edge4\">\n<title>140534790850880-&gt;140534790851608</title>\n<path d=\"M168.5,-415.3799C168.5,-407.1745 168.5,-397.7679 168.5,-388.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-388.784 168.5,-378.784 165.0001,-388.784 172.0001,-388.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140534790850376 -->\n<g class=\"node\" id=\"node6\">\n<title>140534790850376</title>\n<polygon fill=\"none\" points=\"34.5,-249.5 34.5,-295.5 302.5,-295.5 302.5,-249.5 34.5,-249.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"105\" y=\"-268.8\">dropout_55: Dropout</text>\n<polyline fill=\"none\" points=\"175.5,-249.5 175.5,-295.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"204.5\" y=\"-280.3\">input:</text>\n<polyline fill=\"none\" points=\"175.5,-272.5 233.5,-272.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"204.5\" y=\"-257.3\">output:</text>\n<polyline fill=\"none\" points=\"233.5,-249.5 233.5,-295.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-280.3\">(?, 1024)</text>\n<polyline fill=\"none\" points=\"233.5,-272.5 302.5,-272.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-257.3\">(?, 1024)</text>\n</g>\n<!-- 140534790851608&#45;&gt;140534790850376 -->\n<g class=\"edge\" id=\"edge5\">\n<title>140534790851608-&gt;140534790850376</title>\n<path d=\"M168.5,-332.3799C168.5,-324.1745 168.5,-314.7679 168.5,-305.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-305.784 168.5,-295.784 165.0001,-305.784 172.0001,-305.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140534790849872 -->\n<g class=\"node\" id=\"node7\">\n<title>140534790849872</title>\n<polygon fill=\"none\" points=\"48,-166.5 48,-212.5 289,-212.5 289,-166.5 48,-166.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"105\" y=\"-185.8\">dense_55: Dense</text>\n<polyline fill=\"none\" points=\"162,-166.5 162,-212.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"191\" y=\"-197.3\">input:</text>\n<polyline fill=\"none\" points=\"162,-189.5 220,-189.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"191\" y=\"-174.3\">output:</text>\n<polyline fill=\"none\" points=\"220,-166.5 220,-212.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-197.3\">(?, 1024)</text>\n<polyline fill=\"none\" points=\"220,-189.5 289,-189.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-174.3\">(?, 512)</text>\n</g>\n<!-- 140534790850376&#45;&gt;140534790849872 -->\n<g class=\"edge\" id=\"edge6\">\n<title>140534790850376-&gt;140534790849872</title>\n<path d=\"M168.5,-249.3799C168.5,-241.1745 168.5,-231.7679 168.5,-222.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-222.784 168.5,-212.784 165.0001,-222.784 172.0001,-222.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140534790850992 -->\n<g class=\"node\" id=\"node8\">\n<title>140534790850992</title>\n<polygon fill=\"none\" points=\"38,-83.5 38,-129.5 299,-129.5 299,-83.5 38,-83.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"108.5\" y=\"-102.8\">dropout_56: Dropout</text>\n<polyline fill=\"none\" points=\"179,-83.5 179,-129.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"208\" y=\"-114.3\">input:</text>\n<polyline fill=\"none\" points=\"179,-106.5 237,-106.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"208\" y=\"-91.3\">output:</text>\n<polyline fill=\"none\" points=\"237,-83.5 237,-129.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-114.3\">(?, 512)</text>\n<polyline fill=\"none\" points=\"237,-106.5 299,-106.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"268\" y=\"-91.3\">(?, 512)</text>\n</g>\n<!-- 140534790849872&#45;&gt;140534790850992 -->\n<g class=\"edge\" id=\"edge7\">\n<title>140534790849872-&gt;140534790850992</title>\n<path d=\"M168.5,-166.3799C168.5,-158.1745 168.5,-148.7679 168.5,-139.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-139.784 168.5,-129.784 165.0001,-139.784 172.0001,-139.784\" stroke=\"#000000\"/>\n</g>\n<!-- 140534790851328 -->\n<g class=\"node\" id=\"node9\">\n<title>140534790851328</title>\n<polygon fill=\"none\" points=\"51.5,-.5 51.5,-46.5 285.5,-46.5 285.5,-.5 51.5,-.5\" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"108.5\" y=\"-19.8\">dense_56: Dense</text>\n<polyline fill=\"none\" points=\"165.5,-.5 165.5,-46.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"194.5\" y=\"-31.3\">input:</text>\n<polyline fill=\"none\" points=\"165.5,-23.5 223.5,-23.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"194.5\" y=\"-8.3\">output:</text>\n<polyline fill=\"none\" points=\"223.5,-.5 223.5,-46.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-31.3\">(?, 512)</text>\n<polyline fill=\"none\" points=\"223.5,-23.5 285.5,-23.5 \" stroke=\"#000000\"/>\n<text fill=\"#000000\" font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"254.5\" y=\"-8.3\">(?, 1)</text>\n</g>\n<!-- 140534790850992&#45;&gt;140534790851328 -->\n<g class=\"edge\" id=\"edge8\">\n<title>140534790850992-&gt;140534790851328</title>\n<path d=\"M168.5,-83.3799C168.5,-75.1745 168.5,-65.7679 168.5,-56.8786\" fill=\"none\" stroke=\"#000000\"/>\n<polygon fill=\"#000000\" points=\"172.0001,-56.784 168.5,-46.784 165.0001,-56.784 172.0001,-56.784\" stroke=\"#000000\"/>\n</g>\n</g>\n</svg>"
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h5Pw9I-Za6My",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "9b5b5a47-7c9c-432a-e4da-0ef3729e1daf"
      },
      "source": [
        "hist = model.fit_generator(\n",
        "    train_generator,\n",
        "    steps_per_epoch=train_steps,\n",
        "    epochs=50,\n",
        "    validation_data=eval_generator,\n",
        "    validation_steps=val_steps)"
      ],
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.2573 - acc: 0.5010 - val_loss: 0.2515 - val_acc: 0.4996\n",
            "Epoch 2/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2546 - acc: 0.5083 - val_loss: 0.2509 - val_acc: 0.5004\n",
            "Epoch 3/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.2547 - acc: 0.4993 - val_loss: 0.2508 - val_acc: 0.4998\n",
            "Epoch 4/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.2543 - acc: 0.4940 - val_loss: 0.2500 - val_acc: 0.5002\n",
            "Epoch 5/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.2543 - acc: 0.4999 - val_loss: 0.2500 - val_acc: 0.5004\n",
            "Epoch 6/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2527 - acc: 0.5050 - val_loss: 0.2501 - val_acc: 0.5000\n",
            "Epoch 7/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.2528 - acc: 0.4949 - val_loss: 0.2523 - val_acc: 0.4998\n",
            "Epoch 8/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2515 - acc: 0.5004 - val_loss: 0.2503 - val_acc: 0.4998\n",
            "Epoch 9/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.2523 - acc: 0.5021 - val_loss: 0.2517 - val_acc: 0.4996\n",
            "Epoch 10/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.2519 - acc: 0.5099 - val_loss: 0.2516 - val_acc: 0.5006\n",
            "Epoch 11/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.2519 - acc: 0.5022 - val_loss: 0.2504 - val_acc: 0.4998\n",
            "Epoch 12/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.2527 - acc: 0.4886 - val_loss: 0.2514 - val_acc: 0.5006\n",
            "Epoch 13/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.2521 - acc: 0.5014 - val_loss: 0.2500 - val_acc: 0.5002\n",
            "Epoch 14/50\n",
            "312/312 [==============================] - 51s 165ms/step - loss: 0.2518 - acc: 0.5004 - val_loss: 0.2501 - val_acc: 0.4998\n",
            "Epoch 15/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.2512 - acc: 0.5064 - val_loss: 0.2503 - val_acc: 0.4996\n",
            "Epoch 16/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2517 - acc: 0.5010 - val_loss: 0.2500 - val_acc: 0.4996\n",
            "Epoch 17/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2522 - acc: 0.4871 - val_loss: 0.2510 - val_acc: 0.4996\n",
            "Epoch 18/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2511 - acc: 0.5029 - val_loss: 0.2500 - val_acc: 0.5002\n",
            "Epoch 19/50\n",
            "312/312 [==============================] - 51s 165ms/step - loss: 0.2514 - acc: 0.4998 - val_loss: 0.2521 - val_acc: 0.5002\n",
            "Epoch 20/50\n",
            "312/312 [==============================] - 52s 166ms/step - loss: 0.2516 - acc: 0.4915 - val_loss: 0.2501 - val_acc: 0.4998\n",
            "Epoch 21/50\n",
            "312/312 [==============================] - 52s 165ms/step - loss: 0.2510 - acc: 0.5043 - val_loss: 0.2514 - val_acc: 0.4998\n",
            "Epoch 22/50\n",
            "312/312 [==============================] - 52s 166ms/step - loss: 0.2514 - acc: 0.4945 - val_loss: 0.2502 - val_acc: 0.4998\n",
            "Epoch 23/50\n",
            "312/312 [==============================] - 52s 166ms/step - loss: 0.2508 - acc: 0.5007 - val_loss: 0.2502 - val_acc: 0.4998\n",
            "Epoch 24/50\n",
            "312/312 [==============================] - 51s 165ms/step - loss: 0.2513 - acc: 0.4962 - val_loss: 0.2506 - val_acc: 0.4998\n",
            "Epoch 25/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2510 - acc: 0.4990 - val_loss: 0.2500 - val_acc: 0.5004\n",
            "Epoch 26/50\n",
            "312/312 [==============================] - 51s 165ms/step - loss: 0.2512 - acc: 0.4955 - val_loss: 0.2508 - val_acc: 0.5006\n",
            "Epoch 27/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2511 - acc: 0.4936 - val_loss: 0.2504 - val_acc: 0.4996\n",
            "Epoch 28/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2510 - acc: 0.4961 - val_loss: 0.2500 - val_acc: 0.4996\n",
            "Epoch 29/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2505 - acc: 0.4962 - val_loss: 0.2500 - val_acc: 0.4998\n",
            "Epoch 30/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2507 - acc: 0.4970 - val_loss: 0.2500 - val_acc: 0.4998\n",
            "Epoch 31/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2507 - acc: 0.4972 - val_loss: 0.2502 - val_acc: 0.5002\n",
            "Epoch 32/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2508 - acc: 0.4904 - val_loss: 0.2505 - val_acc: 0.5002\n",
            "Epoch 33/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2508 - acc: 0.4955 - val_loss: 0.2500 - val_acc: 0.4996\n",
            "Epoch 34/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2505 - acc: 0.4998 - val_loss: 0.2501 - val_acc: 0.5004\n",
            "Epoch 35/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2505 - acc: 0.4943 - val_loss: 0.2500 - val_acc: 0.5002\n",
            "Epoch 36/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2506 - acc: 0.5009 - val_loss: 0.2500 - val_acc: 0.5002\n",
            "Epoch 37/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.2504 - acc: 0.4989 - val_loss: 0.2506 - val_acc: 0.5000\n",
            "Epoch 38/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2501 - acc: 0.5056 - val_loss: 0.2508 - val_acc: 0.4998\n",
            "Epoch 39/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2501 - acc: 0.5103 - val_loss: 0.2511 - val_acc: 0.5002\n",
            "Epoch 40/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2504 - acc: 0.5059 - val_loss: 0.2500 - val_acc: 0.5002\n",
            "Epoch 41/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.2503 - acc: 0.5017 - val_loss: 0.2505 - val_acc: 0.5000\n",
            "Epoch 42/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2505 - acc: 0.4948 - val_loss: 0.2503 - val_acc: 0.5002\n",
            "Epoch 43/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.2502 - acc: 0.5000 - val_loss: 0.2501 - val_acc: 0.5002\n",
            "Epoch 44/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2505 - acc: 0.4944 - val_loss: 0.2501 - val_acc: 0.4998\n",
            "Epoch 45/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2505 - acc: 0.4991 - val_loss: 0.2500 - val_acc: 0.5002\n",
            "Epoch 46/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2502 - acc: 0.4979 - val_loss: 0.2501 - val_acc: 0.5000\n",
            "Epoch 47/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2503 - acc: 0.4932 - val_loss: 0.2501 - val_acc: 0.5004\n",
            "Epoch 48/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2503 - acc: 0.4981 - val_loss: 0.2502 - val_acc: 0.5000\n",
            "Epoch 49/50\n",
            "312/312 [==============================] - 51s 163ms/step - loss: 0.2503 - acc: 0.4968 - val_loss: 0.2502 - val_acc: 0.4998\n",
            "Epoch 50/50\n",
            "312/312 [==============================] - 51s 164ms/step - loss: 0.2502 - acc: 0.4974 - val_loss: 0.2508 - val_acc: 0.5000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jBQkhHKHQ3i4",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 115
        },
        "outputId": "798f838f-d264-4725-f34f-b82343049b89"
      },
      "source": [
        "kru.show_plots(hist.history, plot_title='Using VGG16 model')"
      ],
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mSXUGOLZ81OS",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 140
        },
        "outputId": "01f42762-5ac8-42ea-d4ee-d2383c5eff66"
      },
      "source": [
        "# 성능 평가\n",
        "loss, acc = model.evaluate_generator(train_generator, steps=train_steps, verbose=1)\n",
        "print('Training data  -> loss: %.3f, acc: %.3f' % (loss, acc))\n",
        "loss, acc = model.evaluate_generator(eval_generator, steps=val_steps, verbose=1)\n",
        "print('Cross-val data -> loss: %.3f, acc: %.3f' % (loss, acc))\n",
        "loss, acc = model.evaluate_generator(test_generator, steps=test_steps, verbose=1)\n",
        "print('Testing data   -> loss: %.3f, acc: %.3f' % (loss, acc))"
      ],
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "312/312 [==============================] - 34s 110ms/step - loss: 0.2507 - acc: 0.5002\n",
            "Training data  -> loss: 0.251, acc: 0.500\n",
            "156/156 [==============================] - 17s 109ms/step - loss: 0.2508 - acc: 0.4998\n",
            "Cross-val data -> loss: 0.251, acc: 0.500\n",
            "62/62 [==============================] - 7s 110ms/step - loss: 0.2508 - acc: 0.4995\n",
            "Testing data   -> loss: 0.251, acc: 0.499\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}
